<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Steve Landey</title><link href="http://localhost:8000/" rel="alternate"></link><link href="http://localhost:8000/feeds/articles.atom.xml" rel="self"></link><id>http://localhost:8000/</id><updated>2018-09-29T00:00:00-07:00</updated><entry><title>The blog has a new home</title><link href="http://localhost:8000/the-blog-has-a-new-home.html" rel="alternate"></link><published>2018-09-29T00:00:00-07:00</published><author><name>Steve Landey</name></author><id>tag:localhost:8000,2018-09-29:the-blog-has-a-new-home.html</id><summary type="html">&lt;p&gt;I've started blogging at
&lt;a href="https://blog.steveasleep.com"&gt;blog.steveasleep.com&lt;/a&gt;, hosted on
&lt;a href="https://write.as"&gt;write.as&lt;/a&gt;. I expect to keep the blog there going forward.
This site runs on &lt;a href="http://docs.getpelican.com/en/stable/"&gt;Pelican&lt;/a&gt;, which is
great for making static sites, but I've been doing a much better job of
writing consistently now that I can do it all from a web browser.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.steveasleep.com/feed/"&gt;Here's the RSS feed.&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="posts-so-far"&gt;Posts so far&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.steveasleep.com/usernames"&gt;Usernames&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.steveasleep.com/community-conferences"&gt;Big and little conferences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.steveasleep.com/questions-i-asked-myself-while-writing-a-simple-web-forum"&gt;The web development decision firehose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A series on things I found on a web site I made when I was 12. These are good!&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.steveasleep.com/autoarchaeology-part-1"&gt;Autoarchaeology Part 1: Web Sites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.steveasleep.com/autoarchaeology-part-2-early-games"&gt;Autoarchaeology Part 2: Early Games&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.steveasleep.com/autoarchaeology-part-3-mac-software"&gt;Autoarchaeology Part 3: Mac Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.steveasleep.com/autoarchaeology-part-4-media"&gt;Autoarchaeology Part 4: Media&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="blog"></category></entry><entry><title>PCG32: The Perfect PRNG for Roguelikes</title><link href="http://localhost:8000/pcg32-the-perfect-prng-for-roguelikes.html" rel="alternate"></link><published>2018-03-14T00:00:00-07:00</published><author><name>Steve Landey</name></author><id>tag:localhost:8000,2018-03-14:pcg32-the-perfect-prng-for-roguelikes.html</id><summary type="html">&lt;p&gt;Roguelikes are games that, among other things, have a lot of procedurally
generated content. To generate content, we need random numbers. And to get
random numbers, we need a &lt;strong&gt;pseudo-random number generator&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Not only do we want random numbers, but we want &lt;em&gt;predictable&lt;/em&gt; random numbers!
We want players to be able to share seeds and see who does better in the same
situation, while also giving people a completely fresh experience every time
they play.&lt;/p&gt;
&lt;p&gt;We can't just create a PRNG with a seed and be done. If we use the same
PRNG for both level generation and combat, for example, then our second level
might change based on how many times the player got into a fight!&lt;/p&gt;
&lt;p&gt;So we need to be clever about how we create and store our PRNGs, to ensure
that the procedurally generated maps are not affected by anything that happens
during gameplay.&lt;/p&gt;
&lt;p&gt;If we use the &lt;a href="http://www.pcg-random.org"&gt;PCG family of PRNGs&lt;/a&gt;, our job
is a lot easier. There are many variants of PCG, but in this post I'll be
referring only to PCG32, the one that generates 32-bit unsigned integers and
keeps its state as two 64-bit unsigned integers.&lt;/p&gt;
&lt;p&gt;(By the way, I used PCG in
&lt;a href="https://irskep.itch.io/dr-hallervorden"&gt;Dr. Hallervorden&lt;/a&gt;, my 7DRL entry for 2018.)&lt;/p&gt;
&lt;h1 id="what-makes-pcg-unique"&gt;What makes PCG unique?&lt;/h1&gt;
&lt;p&gt;PCG has a lot going for it, and &lt;a href="http://www.pcg-random.org"&gt;the web site does a good job of explaining
the advantages&lt;/a&gt;, but for roguelike developers, it
all comes down to the API.&lt;/p&gt;
&lt;p&gt;A PCG instance is created with not one, but &lt;strong&gt;two&lt;/strong&gt; values: the &lt;em&gt;seed&lt;/em&gt;, and the
&lt;em&gt;stream&lt;/em&gt;. The seed matches the traditional idea of a PRNG seed, but the stream
is something new: it lets you pick from &lt;strong&gt;multiple streams of random numbers&lt;/strong&gt;
generated by the same seed!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;UInt64&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;67890&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Seed:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;UInt64&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// two numbers: seed and seq&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;rng&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PCG32Generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;values&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="bp"&gt;map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="kc"&gt;_&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;rng&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;get&lt;/span&gt;&lt;span class="si"&gt;(&lt;/span&gt;&lt;span class="n"&gt;upperBound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="si"&gt;))&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Stream &lt;/span&gt;&lt;span class="si"&gt;\(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s"&gt;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;joined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;separator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Seed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12345&lt;/span&gt;
&lt;span class="n"&gt;Stream&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;82&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;86&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;82&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt;
&lt;span class="n"&gt;Stream&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;
&lt;span class="n"&gt;Stream&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;91&lt;/span&gt;

&lt;span class="n"&gt;Seed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;67890&lt;/span&gt;
&lt;span class="n"&gt;Stream&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;68&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt;
&lt;span class="n"&gt;Stream&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;
&lt;span class="n"&gt;Stream&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;71&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This means you can start your game with one seed, and then lazily create
individual PCG instances for each level at the time you need them, without
worrying that your PRNG state has been messed up just by playing the game.
(There are other ways of making that guarantee that aren't difficult, but this
one is particularly convenient.)&lt;/p&gt;
&lt;p&gt;Once we've created a PCG instance, we only need to store two unsigned
integers! Serialization's a snap.&lt;/p&gt;
&lt;p&gt;So, to sum up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can have multiple, uncorrelated streams of data from the same seed&lt;/li&gt;
&lt;li&gt;You only need to store 16 bytes per instance&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="a-fun-trick-with-strings"&gt;A fun trick with strings&lt;/h1&gt;
&lt;p&gt;Imagine you have a branching level structure. You've got &lt;code&gt;normal-dungeon-1&lt;/code&gt;
through &lt;code&gt;normal-dungeon-30&lt;/code&gt;, and you might branch off into &lt;code&gt;dwarvish-mines-1&lt;/code&gt;
somewhere between level 5 and 15.&lt;/p&gt;
&lt;p&gt;Rather than deciding exactly how to branch when the game starts and generating
all the level seeds in advance, you can create an object that lazily creates
PCG32 instances based on the hash value if your level ID string!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PRNGStore&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Codable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;UInt64&lt;/span&gt;

  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;rngCache&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;UInt64&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PCG32Generator&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
  &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;collisionChecks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;UInt64&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;UInt64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;/// Lazily create a PRNG instance based on the given stream&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;UInt64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;PCG32Generator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;rng&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rngCache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;rng&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PCG32Generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rngCache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;/// Lazily create a PRNG based on the given string by getting its hash value&lt;/span&gt;
  &lt;span class="c1"&gt;/// and handling hash collisions&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;PCG32Generator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;UInt64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bitPattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Int64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hashValue&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;collisionChecks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;collisionChecks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Collision between&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;and&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;collisionChecks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;nil&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;collisionChecks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;collisionChecks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;UInt64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;PCG32Generator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;rng&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rngCache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;rng&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PCG32Generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rngCache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you have a class like this, you never again need to think about when and
how to generate PRNG instances, because it all just happens by magic. Using the
example at the beginning of this section, you can now generate any dungeon using
the PRNG instance at &lt;code&gt;prngStore[levelId]&lt;/code&gt;, e.g. &lt;code&gt;prngStore["dwarvish-mines-1"]&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="language-support"&gt;Language support&lt;/h1&gt;
&lt;p&gt;PCG32 is very easy to implement, so it has broad language support, even though
the algorithm was only introduced in 2014. I wrote two implementations myself:
&lt;a href="https://github.com/irskep/clubsandwich/blob/master/clubsandwich/pcg32.py"&gt;Python&lt;/a&gt;
and &lt;a href="https://github.com/irskep/RogueKit/blob/master/Sources/RogueKit/Util/PCG32.swift"&gt;Swift&lt;/a&gt;.
You should be able to find a good implementation for your favorite language
just by searching the web. And if you can't find one, it really isn't too hard
to do! It's just a handful of bitwise operations.&lt;/p&gt;</summary><category term="gamedev roguelikes"></category></entry><entry><title>2017 Year in Review</title><link href="http://localhost:8000/2017-year-in-review.html" rel="alternate"></link><published>2017-12-20T00:00:00-08:00</published><author><name>Steve Landey</name></author><id>tag:localhost:8000,2017-12-20:2017-year-in-review.html</id><summary type="html">&lt;p&gt;This year I did a bunch of things, but one thing I didn’t do was blog about every single thing. Here’s a roundup of everything I missed.&lt;/p&gt;
&lt;h2 id="i-made-some-games"&gt;I made some games&lt;/h2&gt;
&lt;p&gt;I made three games this year for Ludum Dare 38, 39, and 40: &lt;a href="https://irskep.itch.io/roguebasement"&gt;Rogue Basement&lt;/a&gt;, &lt;a href="https://irskep.itch.io/powerq"&gt;Power-Q&lt;/a&gt;, and &lt;a href="http://steveasleep.com/please-come-in/"&gt;Please, Come In&lt;/a&gt;. Their collective soundtracks contain five original songs.&lt;/p&gt;
&lt;p&gt;The only one I really dedicated myself to during Ludum Dare was &lt;em&gt;Rogue Basement&lt;/em&gt;, and it shows in the ratings. The other two were experiments with frameworks and genres. But I did polish &lt;em&gt;Power-Q&lt;/em&gt; for an iOS release, and &lt;a href="https://itunes.apple.com/us/app/power-q/id1278699114?mt=8"&gt;you can get it now!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It feels good to hit a new personal best in game releases, because it means
I’m more motivated than ever to take my coding to creative places. And the
consistent quality of each game demonstrates how much I’ve learned about game
design over time. &lt;em&gt;Rogue Basement&lt;/em&gt; and &lt;em&gt;Power-Q&lt;/em&gt; eclipse all ~15 other games
I’ve ever made in terms of fun and polish.&lt;/p&gt;
&lt;!-- idea: getting better at making games --&gt;

&lt;h2 id="i-wrote-some-open-source-libraries"&gt;I wrote some open source libraries&lt;/h2&gt;
&lt;p&gt;Early in the year, I was looking into ways to manage a local music collection
and make playback control available to everyone on my home network. After
becoming frustrated with the mpd ecosystem and discovering
&lt;a href="http://beets.io"&gt;beets&lt;/a&gt;, I wrote a collection of Python and JavaScript code
called &lt;a href="https://github.com/irskep/summertunes"&gt;Summertunes&lt;/a&gt; to marry beets to
the &lt;a href="http://mpv.io"&gt;MPV&lt;/a&gt; player with an iTunes-like web interface. Eventually
I wrote some small patches for beets and packaged it all up as a beets plugin
and Python package. But I haven’t made any noise about it at all because it’s
a lot of trouble to set up, and some features aren’t as reliable as I’d like.&lt;/p&gt;
&lt;p&gt;Before writing &lt;em&gt;Rogue Basement&lt;/em&gt;, I wrote
&lt;a href="http://steveasleep.com/clubsandwich/"&gt;clubsandwich&lt;/a&gt;. It’s a framework for
making roguelikes in Python 3 built on the
&lt;a href="http://foo.wyrd.name/en:bearlibterminal"&gt;BearLibTerminal&lt;/a&gt;
retro-terminal-style rendering &amp;amp; input library. It has comprehensive
documentation and examples.&lt;/p&gt;
&lt;p&gt;Before writing &lt;em&gt;Please, Come In&lt;/em&gt;, I wrote &lt;a href="http://steveasleep.com/jumbogrove/"&gt;Jumbo
Grove&lt;/a&gt;. It’s a framework for writing
interactive fiction in JavaScript built on &lt;a href="http://vuejs.org/"&gt;Vue.js&lt;/a&gt;. It
has comprehensive documentation and examples.&lt;/p&gt;
&lt;p&gt;(Obviously there’s a theme to the last two, and it’s a topic I plan to write
about soon.)&lt;/p&gt;
&lt;p&gt;This year I made a very small number of changes to &lt;a href="http://literallycanvas.com"&gt;Literally
Canvas&lt;/a&gt;. I am still mystified by the popularity
of this library. Or, mystified that no one else is interested in maintaining
it despite it being part of their business.&lt;/p&gt;
&lt;p&gt;And finally, I helped the &lt;a href="http://pyglet.readthedocs.io"&gt;pyglet&lt;/a&gt; project
overhaul its documentation tooling. They had used epydoc for years and had
switched to a hacky Sphinx setup that was breaking down on recent Python and
Sphinx releases. (I did something similar for
&lt;a href="http://pillow.readthedocs.io"&gt;pillow&lt;/a&gt; in 2015.)&lt;/p&gt;
&lt;!-- idea: my approach to writing new libraries --&gt;

&lt;h2 id="i-worked-on-some-apps"&gt;I worked on some apps&lt;/h2&gt;
&lt;p&gt;At the beginning of the year, I got involved with &lt;a href="http://ragtag.team"&gt;Ragtag&lt;/a&gt; and started working on a tool for publishing political calls to action. I made an MVP, but wasn’t able to drum up any interest, so I abandoned it. This and another potential project taught me that I don’t have the mental energy to take on projects that amount to second jobs: projects with teams, external requirements, and tools I don’t happen to be interested in. I have a lot of raw output, but unless a project follows my obsession of the month and has no stakes, it’s draining instead of energizing. Donating money is much easier. I don’t want to burn out.&lt;/p&gt;
&lt;p&gt;At some point I decided to take a structured approach to working through my 3-digit Steam backlog. I imported everything into &lt;a href="http://completionator.com"&gt;Completionator&lt;/a&gt;, wrote a scraper for its Excel export feature, and wrote  a &lt;a href="https://github.com/irskep/completionator-cli"&gt;command line tool&lt;/a&gt; to suggest games for me to play. (While kind of neat, this approach didn’t work because I still buy Humble Bundles faster than I can get through the games...)&lt;/p&gt;
&lt;p&gt;Late in the year, I made a small UI polish update to &lt;a href="http://sendimals.com"&gt;Sendimals&lt;/a&gt; and stuck some Google ads at the bottom of the top-level screen. Sendimals now has revenue of two dollars per month. I developed a new way of coloring body parts (our #1 feature request) but haven’t yet found the motivation to update all the UI and data structures to support it.&lt;/p&gt;
&lt;h2 id="i-made-some-videos"&gt;I made some videos&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UC0lx9IhbHiM5XTcdISqttWQ"&gt;I sort of have a YouTube channel now.&lt;/a&gt; I made it to
host my &lt;em&gt;Rogue Basement&lt;/em&gt; timelapse and update videos. Later on, I got the
idea to dig up my old games, get them running on modern macOS, and do video
captures for posterity.&lt;/p&gt;
&lt;h2 id="i-learned-some-new-tech"&gt;I learned some new tech&lt;/h2&gt;
&lt;p&gt;My weapons of choice are Python 3, Swift, and ES6. I didn’t branch out from those languages this year, but there was a lot to learn within those domains.&lt;/p&gt;
&lt;p&gt;In the JavaScript world, I learned about HTML5 audio, and built a library on Vue.js. (Yeah, it really is better than React.)&lt;/p&gt;
&lt;p&gt;In Apple’s domain, I learned SpriteKit, GameplayKit, and the Entity-Component-System design pattern.&lt;/p&gt;
&lt;p&gt;I dug deep into the world of roguelikes this year. It’s a really fun genre to work in as a programmer, because you can go as shallow or deep as you want in different aspects of game design. I spent a lot of time with game architecture design patterns and procedural level algorithms.&lt;/p&gt;
&lt;!-- idea: why vue.js is great for writing libs for noobs --&gt;

&lt;h2 id="i-discovered-some-tools"&gt;I discovered some tools&lt;/h2&gt;
&lt;p&gt;2017 was the year I discovered &lt;a href="http://itch.io"&gt;itch.io&lt;/a&gt;. They’re doing an amazing job of cultivating the Truly Indie™ game scene. They basically run the bar where all the up-and-coming local bands play, except “local” is “everywhere.” &lt;/p&gt;
&lt;p&gt;While making art for Power-Q, I discovered &lt;a href="https://aseprite.org"&gt;Aseprite&lt;/a&gt;, an amazing
pixel art tool.&lt;/p&gt;
&lt;h2 id="i-became-a-better-drummer"&gt;I became a better drummer&lt;/h2&gt;
&lt;p&gt;I practice drums 2-4 days a week after work and over the weekend. I can’t really claim any milestones here, but if my band ever gets off the ground, you might get a chance to hear me on an EP!&lt;/p&gt;
&lt;h2 id="i-played-a-lot-of-video-games"&gt;I played a lot of video games&lt;/h2&gt;
&lt;p&gt;This isn’t really an achievement, but here’s a random Games of the Year list in the middle of a post about creative output.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Steve Johnson Outstanding Achievement in Game Design Awards&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;XCOM 2 and Super Mega Baseball: Extra Innings&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Steve Johnson This Is A Good Roguelike Awards&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tales of Maj’Eyal 4 and HyperRogue&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Steve Johnson I Don’t Hate This First Person Shooter Awards&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ziggurat and Borderlands 2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Steve Johnson This Game Deserves An Award Awards&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Rocket League and The Witness&lt;/p&gt;
&lt;h2 id="when-i-write-all-that-out-it-seems-like-a-lot"&gt;When I write all that out it seems like a lot&lt;/h2&gt;
&lt;p&gt;Those are the things I did with my nights and weekends in 2017! In retrospect, it looks like I overdid it. Time will tell if I manage to tone it down this year.&lt;/p&gt;</summary></entry><entry><title>From PoweRL to Power-Q: game jam to product</title><link href="http://localhost:8000/from-powerl-to-power-q-game-jam-to-product.html" rel="alternate"></link><published>2017-09-03T00:00:00-07:00</published><author><name>Steve Landey</name></author><id>tag:localhost:8000,2017-09-03:from-powerl-to-power-q-game-jam-to-product.html</id><summary type="html">&lt;p&gt;&lt;a href="https://irskep.itch.io/powerq"&gt;Power-Q&lt;/a&gt; is the polished, productized version of my Ludum Dare game &lt;a href="https://irskep.itch.io/powerl"&gt;PoweRL&lt;/a&gt;. They have exactly the same mechanics, but Power-Q has about 30 extra hours of effort invested into it. Before I send it out into the world, I want to reflect upon where those 30 hours went.&lt;/p&gt;
&lt;p&gt;Power-Q is in beta on Mac and iOS. You can get the Mac beta &lt;a href="https://irskep.itch.io/powerl"&gt;on itch.io&lt;/a&gt;, but to get the iOS beta you’ll have to &lt;a href="powerq@steve.steveasleep.com"&gt;email me.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot" src="http://localhost:8000/img/powerq/screenshot.png" /&gt;&lt;/p&gt;
&lt;p&gt;Before:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/UwGfKSDzyeY?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;After:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/5ggZDCYNHyg?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id="game-mechanics"&gt;Game mechanics&lt;/h2&gt;
&lt;p&gt;Power-Q is a turn-based game played on an 8-column, 6-row grid. The player is a robot with a health bar and a power meter. They can move up, down, left, or right. Each move drains power.&lt;/p&gt;
&lt;p&gt;The level contains walls, enemies, powerups, and an exit. The overall goal of the game is to reach the exit 8 times. Each level has more enemies than the last. Powerups include health boosts, power boosts, and ammunition.&lt;/p&gt;
&lt;p&gt;There are three kinds of enemies. They move in specific patterns (diagonals, up/down/left/right every other turn, and knight-style) and sap your health when they hit you. There are also “power drains,” which sap your power and disappear if you run over them.&lt;/p&gt;
&lt;p&gt;&lt;img alt="moves diagram" src="http://localhost:8000/img/powerq/moves.png" /&gt;&lt;/p&gt;
&lt;p&gt;The player has a melee attack and a ranged attack. The melee attack can kill a health-draining enemy in two hits. The ranged attack consumes ammunition and can kill an enemy in one hit.&lt;/p&gt;
&lt;p&gt;Although I only published the Mac version for Ludum Dare, I wanted to make sure the interface could work on an iPhone. There are only two kinds of interactions you can have with the game: you can move (arrow keys on Mac, swipe on iOS) and shoot (click on Mac, double-tap on iOS).&lt;/p&gt;
&lt;p&gt;That’s it, the end! That’s the whole game. Each game is supposed to last about five minutes. I could expand the enemy roster, but I wanted to limit the scope to something I could finish on weekends before my intrinsic motivation ran out.&lt;/p&gt;
&lt;h3 id="polishing-the-mechanics"&gt;Polishing the mechanics&lt;/h3&gt;
&lt;p&gt;I was pretty happy with the mechanics in the context of a short game, but I wanted to solve a few problems before sending it out to the masses.&lt;/p&gt;
&lt;h4 id="unreachable-exits-and-powerups"&gt;Unreachable exits and powerups&lt;/h4&gt;
&lt;p&gt;One of the most common bits of negative feedback from Ludum Dare raters, besides crashes, was that the exit was sometimes unreachable or too close to the player to be a challenge.&lt;/p&gt;
&lt;p&gt;I could have solved this by writing a smarter level generator, but I liked the general character of the levels I was getting already, so I just added a flood fill-style reachability check and had the game re-roll the level if it was no good. Exit placement was solved by putting it as far away from the player as possible instead of any old place.&lt;/p&gt;
&lt;p&gt;If you look at the console logs, you’ll see that every level is re-rolled 1-4 times on average, but it’s really fast, so it won’t matter to players.&lt;/p&gt;
&lt;h4 id="frustrating-targeting"&gt;Frustrating targeting&lt;/h4&gt;
&lt;p&gt;Shooting follows a line determined by &lt;a href="https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm"&gt;Bresenham's algorithm&lt;/a&gt;. It means a bullet path follows the yellow squares:&lt;/p&gt;
&lt;p&gt;&lt;img alt="bresenham exmaple" src="http://localhost:8000/img/powerq/bresenham_1.png" /&gt;&lt;/p&gt;
&lt;p&gt;The algorithm is popular and well understood. It's convenient for a programmer, but can be frustrating for players if used for this kind of thing naïvely.&lt;/p&gt;
&lt;p&gt;As an example, take a look at this situation:&lt;/p&gt;
&lt;p&gt;&lt;img alt="bresenham exmaple" src="http://localhost:8000/img/powerq/bresenham_2.png" /&gt;&lt;/p&gt;
&lt;p&gt;Given the way shooting works, the player could reasonably expect to shoot around the corner. And it would work:&lt;/p&gt;
&lt;p&gt;&lt;img alt="bresenham exmaple" src="http://localhost:8000/img/powerq/bresenham_3.png" /&gt;&lt;/p&gt;
&lt;p&gt;But what if the middle two cells were flipped? The player probably expects to be able to shoot the enemy.&lt;/p&gt;
&lt;p&gt;&lt;img alt="bresenham exmaple" src="http://localhost:8000/img/powerq/bresenham_4.png" /&gt;&lt;/p&gt;
&lt;p&gt;Oh no! That's a terrible experience! it will fail and the player won't know why.&lt;/p&gt;
&lt;p&gt;I solved this problem by exploiting the asymmetry of Bresenham's line algorithm. If you run it from point A to point B, you get a different set of points than if you run it from point B to point A! By running it both ways every time, almost all of these weird cases are covered because the reverse version uses a slightly different path from the regular version.&lt;/p&gt;
&lt;h4 id="smarter-enemies"&gt;Smarter enemies&lt;/h4&gt;
&lt;p&gt;The AI in this game is really dumb. The diagonal- and knight-moving enemies don't do any pathfinding. They just move to whatever cell is closest to them.&lt;/p&gt;
&lt;p&gt;The dumb AI is mostly fine, but for the "turtle" (originally an actual turtle, now a kind of blobby thing), which moves one cell up/down/left/right every other turn, it was too much of a limitation. So I added pathfinding just to the turtle. It will move toward the player even if it has to go around some walls, instead of getting stuck in corners like an idiot.&lt;/p&gt;
&lt;h4 id="scoring"&gt;Scoring&lt;/h4&gt;
&lt;p&gt;Typical players will die a lot before beating the game, and I don't want them to feel like they aren't progressing. A simple high score counter seemed like a good solution. I made each enemy worth one point and displayed the highest score on the title screen.&lt;/p&gt;
&lt;h2 id="art"&gt;Art&lt;/h2&gt;
&lt;p&gt;I developed the game using ASCII characters for most of Ludum Dare. Midway through, I turned the enemies into emoji. As the deadline approached, it didn’t feel right to use Apple’s beautiful high-resolution animal illustrations as my game art, so I did some bad tracings in Pixelmator and shipped it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot from jam" src="http://localhost:8000/img/powerq/screenshot_before.png" /&gt;&lt;/p&gt;
&lt;p&gt;I immediately regretted all of my art choices. The whole thing looked like crap to me. So I downloaded &lt;a href="https://piskelapp.com"&gt;Piskel&lt;/a&gt; and started on some 16x16 pixel art style sprites. The result was a lot more charming! I packaged it up into a post-compo build with some crash fixes a couple days after the jam ended.&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot from just after the" src="http://localhost:8000/img/powerq/screenshot_before_2.png" /&gt;&lt;/p&gt;
&lt;h3 id="polishing-the-art"&gt;Polishing the art&lt;/h3&gt;
&lt;p&gt;As I converted more of my art to the new style, I became frustrated with Piskel’s UI. I bought &lt;a href="https://www.aseprite.org"&gt;Aseprite&lt;/a&gt; instead and my pixel art productivity skyrocketed. I reduced my color palette and put the finishing touches on the sprites. As someone without any art training, I found creating the color palette to be a bigger challenge than I would have expected, though I suspect if I had started with Aseprite instead of Piskel I would have been more consistent from the beginning and had an easier time of it.&lt;/p&gt;
&lt;p&gt;My game-over screens were just black voids with text in the middle of them, so as soon as I was done with the sprites, I did some simple illustrations for the three possible endgame conditions: a win, a loss due to power, and a loss due to health.&lt;/p&gt;
&lt;p&gt;One enemy, formerly known as the turtle, moves every other turn. It was impossible to know at a glance whether it was about to move or not. I replaced the single turtle frame with a blobby thing that flips between two frames.&lt;/p&gt;
&lt;p&gt;I’m leaving a lot out here. There were probably a hundred more little things I did to the art.&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot from final game" src="http://localhost:8000/img/powerq/screenshot.png" /&gt;&lt;/p&gt;
&lt;h2 id="music-and-sound"&gt;Music and sound&lt;/h2&gt;
&lt;p&gt;Music production for 48-hour game jams requires a careful balance between time spent and dopeness. My initial music pass had a pretty good set of sounds and melodies, but I rearranged it a little bit for the final release. I might still write a second track.&lt;/p&gt;
&lt;p&gt;To get an extra push over the musical polish line, I put &lt;a href="https://gooseninja.itch.io/space-music-pack"&gt;GooseNinja’s space-themed loading track&lt;/a&gt; over the title screen. If this game makes any money, I’ll be kicking some of it over to them.&lt;/p&gt;
&lt;p&gt;My approach to sound was to open Logic Pro X and bonk around on presets until it sounded video gamey. It worked great! I didn’t change much on the sound front, but the ranged attack sound was a little clipped and unimpressive. I replaced it with two sounds: one for the player firing and one for the impact of the bullet. The firing sound is a drum machine hi hat and the impact is a kick drum.&lt;/p&gt;
&lt;p&gt;I added graphical toggles for sound and music, because smartphone users are often listening to podcasts or music while they play games. I made sure the game wouldn’t interrupt any already-playing audio.&lt;/p&gt;
&lt;p&gt;My Ludum Dare score for audio was a lot lower than I thought it would be, so I worry that I haven’t done enough for the audio of this game. My last game, &lt;a href="https://irskep.itch.io/roguebasement"&gt;Rogue Basement&lt;/a&gt;, scored much higher and didn’t even have sound effects! What it did have, though, was four tracks of music and cool location-based transitions between them. Power-Q doesn’t have the same sense of space, and I’m not sure I’ll be able to make the music as distinctive as it was in Rogue Basement no matter what I do, so I’m not worrying about it for now.&lt;/p&gt;
&lt;h2 id="help-screen"&gt;Help screen&lt;/h2&gt;
&lt;p&gt;For the Ludum Dare build, I did what most people do: slap some instruction text on the title screen. For the final version, I moved the instructions to a separate screen.&lt;/p&gt;
&lt;p&gt;Before:&lt;/p&gt;
&lt;p&gt;&lt;img alt="help screen before" src="http://localhost:8000/img/powerq/help_screen_before.png" /&gt;&lt;/p&gt;
&lt;p&gt;After:&lt;/p&gt;
&lt;p&gt;&lt;img alt="help screen after" src="http://localhost:8000/img/powerq/help_screen.png" /&gt;&lt;/p&gt;
&lt;h2 id="portrait-mode"&gt;Portrait mode&lt;/h2&gt;
&lt;p&gt;One of my core beliefs as an iOS gamer and developer is one that apparently isn’t shared by game developers who make otherwise great games:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If your iOS game can be played with one hand, it should support portrait mode.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I can’t believe I even have to bring this up, but for frack’s sake, 868-HACK can only be played in landscape mode! I’ve developed a comfortable but absurd grip that lets me see the screen and move, but there is absolutely no reason why that game could not let you rotate that little glass rectangle 90 degrees and keep all the text readable.&lt;/p&gt;
&lt;p&gt;Given my passion for this belief, as soon as Ludum Dare was over, I began to think about how I’d go about supporting portrait mode in Power-Q.&lt;/p&gt;
&lt;p&gt;In terms of just the interface, the solution was simple. The 8x6 grid was designed to comfortably fit on an iPhone 5S without scrolling, so in portrait mode, it would just become a 6x8 grid! The map would physically stay in the same place in both rotations; only your perspective of the objects would change. The resource bars and labels would be at the bottom of the screen instead of the left.&lt;/p&gt;
&lt;p&gt;In practice, this feels a bit weird when you see the rotation in person, but when you’re playing locked in one rotation it doesn’t matter at all and just works.&lt;/p&gt;
&lt;p&gt;&lt;img alt="help screen after" src="http://localhost:8000/img/powerq/portrait.png" /&gt;&lt;/p&gt;
&lt;p&gt;But in the code, it was nightmarish. I had to move a lot of layout code around and make sure every sprite was in the right place at all times. And because the map was just rotated 90º, I also had to un-rotate all the sprites individually and do a little bit of funky coordinate space translation math to detect grid touches correctly. Now every single screen in the game has two completely separate layouts that have to be individually tested.&lt;/p&gt;
&lt;p&gt;So I guess I lied when I said there was “no reason” why 868-HACK couldn’t support portrait mode. It would be a lot of work. But I swear on Steve Job’s grave that I would pay $10 for an in-app purchase that enables it.&lt;/p&gt;
&lt;p&gt;Now that I’ve baked the portrait/landscape duality into the game, I think I’ll just do it for every iOS game I make going forward. The patterns are easy to understand and implement. In the future, though, I’m going to just make games with scrolling or square maps so I don’t have to rotate the playing field.&lt;/p&gt;
&lt;h2 id="saving-and-loading"&gt;Saving and loading&lt;/h2&gt;
&lt;p&gt;Power-Q is a simple game without an explicit save system, but on iOS it’s important not to lose the player’s game when the app is kicked out of RAM.&lt;/p&gt;
&lt;p&gt;That means my hacky, often thoughtless Ludum Dare code had to be refactored &lt;em&gt;a lot&lt;/em&gt;. The main issue was that the map generator gave you a fully connected object graph with lots of references between objects, instead of a flat data structure that was easy to serialize. &lt;/p&gt;
&lt;p&gt;There was no shortcut, so I just dove in. It took about 500 lines of new code, but it worked the very first time I ran it. (I have a lot of practice writing serialization code from working on &lt;a href="https://itunes.apple.com/us/app/hipmunk-travel-hotels-flights/id419950680"&gt;Hipmunk&lt;/a&gt;!)&lt;/p&gt;
&lt;p&gt;PowerRL/Power-Q uses an &lt;a href="https://developer.apple.com/library/content/documentation/General/Conceptual/GameplayKit_Guide/EntityComponent.html#//apple_ref/doc/uid/TP40015172-CH6-SW1"&gt;entity-component system&lt;/a&gt;. The main change I made was to add serialization code to every component possible. I also introduced new components whose only job is to hold information used to reconstruct more complex components when the game is loaded from a file.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/irskep/624d8edb0007e796d6ba0fdd2a5cb9ea"&gt;Here’s what the save file looks like.&lt;/a&gt; It’s written at the beginning of each level and loaded when the app launches.&lt;/p&gt;
&lt;h2 id="takeaways"&gt;Takeaways&lt;/h2&gt;
&lt;p&gt;Swift, SpriteKit, and GameplayKit are really, really good for rapid prototyping and general 2D game development. I’ll never produce a Windows or Android port, but having fun is more important to me.&lt;/p&gt;
&lt;p&gt;Good-looking pixel art is much easier for me to create than vector art. I’ll just start with that style in future game jams.&lt;/p&gt;
&lt;p&gt;It helps to think about saving and loading from the beginning, to avoid working with bad assumptions about how scene construction and map creation should work.&lt;/p&gt;
&lt;p&gt;Re-rolling bad procedurally generated levels is much simpler than writing fancy algorithms to make them good in the first place, as long as it’s cheap to do so.&lt;/p&gt;
&lt;h2 id="full-changelog"&gt;Full changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Completely new art in every screen&lt;/li&gt;
&lt;li&gt;Portrait mode supported on phones&lt;/li&gt;
&lt;li&gt;UI layout tweaks in every screen&lt;/li&gt;
&lt;li&gt;Help screen&lt;/li&gt;
&lt;li&gt;No levels with unreachable exits or powerups&lt;/li&gt;
&lt;li&gt;Music is slightly better&lt;/li&gt;
&lt;li&gt;Different sounds for shooting&lt;/li&gt;
&lt;li&gt;Game saves at the start of each level, loads on launch&lt;/li&gt;
&lt;/ul&gt;</summary><category term="games"></category></entry><entry><title>PoweRL postmortem</title><link href="http://localhost:8000/powerl-postmortem.html" rel="alternate"></link><published>2017-08-05T00:00:00-07:00</published><author><name>Steve Landey</name></author><id>tag:localhost:8000,2017-08-05:powerl-postmortem.html</id><summary type="html">&lt;p&gt;&lt;a href="https://ldjam.com"&gt;Ludum Dare 39&lt;/a&gt; fell on a weekend when I wasn't busy, and I wanted an excuse to learn a bit about Apple's game libraries, so I made another &lt;a href="https://en.wikipedia.org/wiki/Roguelike"&gt;roguelike&lt;/a&gt;, &lt;a href="https://irskep.itch.io/powerl"&gt;PoweRL&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot" src="http://localhost:8000/img/powerl/screenshot.png" /&gt;&lt;/p&gt;


&lt;p&gt;I wasn't in the mood for stress, so I set my standards very, very low. Ironically, the result is more commercially viable than most of what I make! That might not be apparent from the screenshot, but maybe this new version with updated art will convince you:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 2" src="http://localhost:8000/img/powerl/screenshot2.png" /&gt;&lt;/p&gt;
&lt;h2 id="swift-spritekit-and-gameplaykit"&gt;Swift, SpriteKit, and GameplayKit&lt;/h2&gt;
&lt;p&gt;"iOS engineer" is part of my normal job description, but in the past I've avoided using Swift or Objective-C for jams because it isn't cross-platform. But since I didn't really care about the outcome of this jam, I let my curiosity about SpriteKit and GameplayKit win out over portability.&lt;/p&gt;
&lt;p&gt;I'm really glad I did, because after learning the frameworks, I spent almost no time worrying about the engine! My last Ludum Dare game, &lt;a href="/|filename|/posts/2017-05-04-the-design-and-implementation-of-rogue-basement.html"&gt;Rogue Basement&lt;/a&gt;, needed a lot of up-front work on the engine to get running, and then optimization work after completion. But with PoweRL, SpriteKit made for an efficient renderer and animation system, and GameplayKit gave me structure for gameplay code and a few nice utilities like pathfinding.&lt;/p&gt;
&lt;h2 id="iteration"&gt;Iteration&lt;/h2&gt;
&lt;p&gt;Swift is a great language for iteration. In a lot of ways you can treat it like a dynamically typed language, but still have a lot of problems caught by the compiler. Even though there's a compilation step between writing the code and testing it, I think I iterated more quickly than I do with Python because I never hit a typo at runtime.&lt;/p&gt;
&lt;p&gt;GameplayKit's entity-component system is well designed and honestly taught me for the first time how that kind of architecture is supposed to work.&lt;/p&gt;
&lt;p&gt;SpriteKit's &lt;code&gt;SKLabelNode&lt;/code&gt; let me write almost the whole game in old-school roguelike style, with letters representing everything instead of graphics. But at the end, it was very easy to swap in bitmap art.&lt;/p&gt;
&lt;h2 id="evolution-of-the-design"&gt;Evolution of the design&lt;/h2&gt;
&lt;p&gt;Ever since starting to play &lt;a href="http://www.smestorp.com"&gt;868-HACK&lt;/a&gt; on my phone, I've wanted to try making a game in the same genre (pocket roguelike). The SpriteKit template in Xcode immediately gives you a codebase that runs on macOS, iOS, and tvOS, so right from the start, I kept in mind a control scheme that could work on keyboards and touch screens alike. Swiping would move your character, and tapping would do something else.&lt;/p&gt;
&lt;p&gt;The theme of the jam was "running out of power," so I did something dumb and obvious: I made a robot with a power meter. I put it in a level filled with walls, batteries, and "power drains." When I went to bed Friday night, that was it: a game about getting from Point A to Point B without running out of power, over and over again.&lt;/p&gt;
&lt;p&gt;That's an interesting set of mechanics by itself because the player already has interesting decisions to make:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What path should I take through the level to minimize power loss?&lt;/li&gt;
&lt;li&gt;Should I pick up all the batteries? Is that worthwhile?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next day I added the butterfly, which moves one tile diagonally per turn. I added a health bar and some health pickups. Then I added a turtle, which moves one tile non-diagonally every other turn. Over lunch, I pondered other enemies I could add, and ultimately plopped in a literal chess knight.&lt;/p&gt;
&lt;p&gt;These changes added a second dimension to the gameplay, which introduces new questions and tradeoffs. Players must now constantly decide whether they value power or health more, and act accordingly. They would be asking questions like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Should I pick up the battery, even if enemies drain my health along the way?&lt;/li&gt;
&lt;li&gt;Can I make it through that pack of enemies?&lt;/li&gt;
&lt;li&gt;Should I run through that line of power drains, or make it past those enemies? Do I value health or power more right now?&lt;/li&gt;
&lt;li&gt;If I beeline for the exit, will I be able to recover the power in the next level, which is more difficult?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The enemies seemed to be able to get the best of the player too often, so I finally made use of the tap control: bullets! I added ammo pickups and a simple Bresenham line-based instakill shooting mechanic.&lt;/p&gt;
&lt;p&gt;This change added an element of long-term strategy. Players could pick different values for these strategy-axes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Never pick up bullets to avoid wasting energy, or pick up all the bullets?&lt;/li&gt;
&lt;li&gt;Shoot everything on sight, or only shoot in dire situations?&lt;/li&gt;
&lt;li&gt;Use ammo early, or hoard for later?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With all the mechanics in place, I played through a few times for balance. I tweaked the level generator parameters for number of enemies, amount of health/ammo/batteries per level, number of walls, and movement cost. The game got too hard after level 8, so I added a win condition at level 8. And that was it!&lt;/p&gt;
&lt;h3 id="influences"&gt;Influences&lt;/h3&gt;
&lt;p&gt;Two things influenced my approach toward designing this game. The first is Jesse Schell's book &lt;a href="https://www.amazon.com/Art-Game-Design-Lenses-Second/dp/1466598646/"&gt;The Art of Game Design: A Book of Lenses&lt;/a&gt;. It helps frame a lot of important questions. The second is roguelikes in general, which at their core are about creating interesting decisions for players every single turn of every game.&lt;/p&gt;
&lt;h2 id="music"&gt;Music&lt;/h2&gt;
&lt;p&gt;I spent an hour or so in Logic Pro with my 25-key MIDI controller, electric bass, and the Logic Pro Auto-Drummer. I started with the beat, added some bass, added some synths, wrote a new part with the bass, filled in with synths, and then shuffled it all around until it felt passable.&lt;/p&gt;
&lt;p&gt;That's my normal way of working when I have limited time for music. For Rogue Basement, my last game, I wrote two songs just by holding down a single note for 5 minutes in an arpeggiating synthesizer and adding some occasional notes on a pad synth on top of it. Another Rogue Basement song was just a piano improvisation jam. When you only have 48 hours to make a game, you have to take as many shortcuts as you can get away with!&lt;/p&gt;
&lt;h2 id="art"&gt;Art&lt;/h2&gt;
&lt;p&gt;I used Apple's beautiful emojis for enemies during development, but I felt that it wouldn't be in the spirit of Ludum Dare to use them as my final sprites, since they are finely rendered illustrations that I did not create. So I vector-traced them by hand in Pixelmator, added bad gradients, and called it a day, finishing about 20 minutes before the deadline.&lt;/p&gt;
&lt;p&gt;Those sprites are fine in that you can tell what's what, but I really dislike the aesthetic. Over the following few week nights, I redid all the sprites in 16x16 pixel art. It's more of an explicit 868-HACK ripoff with that style, but it's also the only style I can use myself to create art I'm happy with. I bet that's true of a lot of programmers.&lt;/p&gt;
&lt;p&gt;I can't use the new sprites in the Ludum Dare judging, but I can at least use it as the canonical version when judging is over, and recover a bit of self-respect.&lt;/p&gt;
&lt;h2 id="parting-thoughts"&gt;Parting thoughts&lt;/h2&gt;
&lt;p&gt;I took a lot more breaks this time than I did in the past. These days I value my weekend chill-out a lot. But by being smart about tools, game design, and assets, I ended up with something I'm proud of.&lt;/p&gt;
&lt;p&gt;For the next Ludum Dare, I'm going to try to join a team.&lt;/p&gt;</summary><category term="games"></category></entry><entry><title>Videos of old games</title><link href="http://localhost:8000/videos-of-old-games.html" rel="alternate"></link><published>2017-05-21T00:00:00-07:00</published><author><name>Steve Landey</name></author><id>tag:localhost:8000,2017-05-21:videos-of-old-games.html</id><summary type="html">&lt;p&gt;I spent the day making some basic playthrough videos of some of my old games. Check 'em out! You can find more info about them &lt;a href="/games.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most of these videos have some kind of disruptive sound.&lt;/p&gt;
&lt;h1 id="bibble-biter-2005"&gt;Bibble Biter (2005)&lt;/h1&gt;
&lt;iframe width="560" height="400" src="https://www.youtube.com/embed/X1HYYvUmCuc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1 id="walaga-2005"&gt;Walaga (2005)&lt;/h1&gt;
&lt;iframe width="560" height="400" src="https://www.youtube.com/embed/z2du6zxYmcM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1 id="canvas-wars-2-2005-unfinished"&gt;Canvas Wars 2 (2005?, unfinished)&lt;/h1&gt;
&lt;iframe width="560" height="340" src="https://www.youtube.com/embed/d7peqm5ZOH8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;There was a Canvas Wars 1, but the code is long gone.&lt;/p&gt;
&lt;h1 id="whizbang-2005-unfinished"&gt;Whizbang (2005, unfinished)&lt;/h1&gt;
&lt;iframe width="560" height="340" src="https://www.youtube.com/embed/R4qM0PDF2bQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1 id="artack-2006"&gt;Artack (2006)&lt;/h1&gt;
&lt;iframe width="560" height="400" src="https://www.youtube.com/embed/xOLhMyyxqiA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="http://localhost:8000/downloads/Artack.zip"&gt;You can actually download this one!&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="guy-who-catches-on-fire-2007-demo"&gt;Guy who catches on fire (2007?, demo)&lt;/h1&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/J-oM7qDnx_w" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1 id="tormegra-2007-unfinished"&gt;Tormegra (2007, unfinished)&lt;/h1&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/8DlEQO92Knc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1 id="elite-bungie-chopper-squadron-2008"&gt;Elite Bungie Chopper Squadron (2008)&lt;/h1&gt;
&lt;iframe width="560" height="400" src="https://www.youtube.com/embed/vLTsKThAedw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

</summary><category term="games"></category></entry><entry><title>The Design and Implementation of Rogue Basement</title><link href="http://localhost:8000/the-design-and-implementation-of-rogue-basement.html" rel="alternate"></link><published>2017-05-04T00:00:00-07:00</published><author><name>Steve Landey</name></author><id>tag:localhost:8000,2017-05-04:the-design-and-implementation-of-rogue-basement.html</id><summary type="html">&lt;p&gt;This year I participated in &lt;a href="https://ldjam.com"&gt;Ludum Dare 38&lt;/a&gt;, a 48-hour game programming "competition." I've been thinking about trying my hand at a roguelike for a while now, and it seemed like the perfect opportunity to give it a shot. I made &lt;a href="https://ldjam.com/events/ludum-dare/38/rogue-basement"&gt;Rogue Basement&lt;/a&gt;, a bare-bones, single-level game with ASCII graphics.&lt;/p&gt;
&lt;p&gt;In this article, I'll cover the game design decisions I made, how they affect the player's experience, and a bit of how they're implemented. &lt;a href="https://github.com/irskep/rogue_basement"&gt;The source code&lt;/a&gt; is extensively commented as well.&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot" src="http://localhost:8000/img/rogue_basement/screenshot2.png" /&gt;&lt;/p&gt;


&lt;h1 id="what-is-a-roguelike"&gt;What is a roguelike?&lt;/h1&gt;
&lt;p&gt;A "roguelike" is a game that is "like Rogue," a text-based game from the 1980s that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Rogue_Screen_Shot_CAR.png" src="http://localhost:8000/img/rogue_basement/257BD0D6AB2E10E523C6F74028CBC005.png" /&gt;&lt;/p&gt;
&lt;p&gt;Typical features of these games include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Procedurally generated levels&lt;/li&gt;
&lt;li&gt;Permadeath (one life)&lt;/li&gt;
&lt;li&gt;Turn-based action&lt;/li&gt;
&lt;li&gt;Top-down 2D graphics, often just text&lt;/li&gt;
&lt;li&gt;Simulation-oriented; interesting stories arise from the game's rules and behavior&lt;/li&gt;
&lt;li&gt;Very difficult to win without lots of practice&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The combination of these features makes the games fun to play over and over again. You have to play a lot to get good, but since the game is procedurally generated, you're always facing new situations. You have to use your wits to survive.&lt;/p&gt;
&lt;h1 id="environment"&gt;Environment&lt;/h1&gt;
&lt;p&gt;I started on Friday night with a level generator. When you're time-constrained, you have to make very careful decisions about where to innovate, and I chose to stick to a roguelike trope for my basic layout: boxy rooms connected by narrow corridors, with doors where corridors meet rooms.&lt;/p&gt;
&lt;p&gt;I could have placed a bunch of rooms randomly and made sure each one was connected to another, but it's tricky to use space efficiently that way. A common way to avoid this problem is to use a &lt;strong&gt;binary space partitioning tree.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The basic idea here is that you take a rectangular area, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+----------------------------------------+
|                                        |
|                                        |
|                                        |
|                                        |
|                                        |
|                                        |
|                                        |
|                                        |
|                                        |
|                                        |
|                                        |
+----------------------------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Divide it along the X or Y axis at a random point, like this, and label each side:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+----------------------------------------+
|                 |                      |
|                 |                      |
|                 |                      |
|                 |                      |
|                 |                      |
|       a         |          b           |
|                 |                      |
|                 |                      |
|                 |                      |
|                 |                      |
|                 |                      |
+----------------------------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Within each side, divide again on the other axis at a random point:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+----------------------------------------+
|                 |                      |
|       aa        |         ba           |
|                 |                      |
|-----------------|                      |
|                 |                      |
|                 |----------------------|
|                 |                      |
|                 |                      |
|       ab        |         bb           |
|                 |                      |
|                 |                      |
+----------------------------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Divide some more...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+----------------------------------------+
|       |         |              |       |
|  aaa  |   aab   |     baa      |  bab  |
|       |         |              |       |
|-----------------|              |       |
|          |      |              |       |
|          |      |----------------------|
|          |      |       |              |
|   aba    | abb  |       |              |
|          |      |  bba  |     bbb      |
|          |      |       |              |
|          |      |       |              |
+----------------------------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the cells get too small, stop dividing. Inside each cell, decide how to use the space. The most basic strategy is to just completely fill each cell. Here's a screenshot I took when I got to this point:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 2017-04-21 21.00.42.png" src="http://localhost:8000/img/rogue_basement/F883885B86DCA6D8BD0F58083AB16166.png" /&gt;&lt;/p&gt;
&lt;p&gt;But it's more interesting to mix it up with different sizes of rectangles.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+----------------------------------------+
| +--+  | +------+|   +------+   |       |
| |  |  | |      ||   |      |   |+-----+|
| +--+  | +------+|   |      |   ||     ||
|-----------------|   |      |   ||     ||
|          |+--+  |   +------+   |+-----+|
|          ||  |  |----------------------|
|   +----+ ||  |  |+-----+|              |
|   |    | ||  |  ||     ||+-----+       |
|   |    | |+--+  ||     |||     |       |
|   +----+ |      ||     |||     |       |
|          |      |+-----+|+-----+       |
+----------------------------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You probably noticed I annotated all the cells with &lt;code&gt;aab&lt;/code&gt; and such. We'll use that information to add corridors. For every pair of areas that share the first 2 letters of their identifier ("siblings in the tree"), we add an L-shaped corridor from a random point in one to a random point in the other. If a point is already inside a room, we'll leave it alone. If a point is on a wall, we'll turn it into a door.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+----------------------------------------+
| +--+    +------+|   +------+           |
| |  &amp;#39;####&amp;#39;      ||   |      |    +-----+|
| +--+    +------+|   |      &amp;#39;####&amp;#39;     ||
|-----------------|   |      |    |     ||
|           +--+  |   +------+    +-----+|
|     ######&amp;#39;  |  |----------------------|
|   +-&amp;#39;--+  |  |  |+-----+               |
|   |    |  |  |  ||     | +-----+       |
|   |    |  +--+  ||     &amp;#39;#&amp;#39;     |       |
|   +----+        ||     | |     |       |
|                 |+-----+ +-----+       |
+----------------------------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we do it again, but the random point in each section will come from a random room in each respective section:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+----------------------------------------+
| +--+    +------+|   +------+           |
| |  &amp;#39;####&amp;#39;      ||   |      |    +-----+|
| +--+    +&amp;#39;-----+|   |      &amp;#39;####&amp;#39;     ||
|          #      |   |      |    |     ||
|          #+--+  |   +-&amp;#39;----+    +-----+|
|     ######&amp;#39;  |  |     #                |
|   +-&amp;#39;--+ #|  |  |+----&amp;#39;+               |
|   |    | #|  |  ||     | +-----+       |
|   |    +##+--+  ||     &amp;#39;#&amp;#39;     |       |
|   +----+        ||     | |     |       |
|                 |+-----+ +-----+       |
+----------------------------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And finally we'll do it again to the top-level pair:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+----------------------------------------+
| +--+    +------+    +------+           |
| |  &amp;#39;####&amp;#39;      &amp;#39;#   |      |    +-----+|
| +--+    +&amp;#39;-----+#   |      &amp;#39;####&amp;#39;     ||
|          #      #   |      |    |     ||
|          #+--+  #   +-&amp;#39;----+    +-----+|
|     ######&amp;#39;  |  #     #                |
|   +-&amp;#39;--+ #|  |  #+----&amp;#39;+               |
|   |    | #|  |  #|     | +-----+       |
|   |    +##+--+  #&amp;#39;     &amp;#39;#&amp;#39;     |       |
|   +----+         |     | |     |       |
|                  +-----+ +-----+       |
+----------------------------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And here's how it looked during development:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 2017-04-21 21.50.39.png" src="http://localhost:8000/img/rogue_basement/B74AF325D250255EA7B86A64BE1AAFD0.png" /&gt;&lt;/p&gt;
&lt;p&gt;We now have a few guarantees:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All rooms are reachable from all other rooms.&lt;/li&gt;
&lt;li&gt;No rooms intersect.&lt;/li&gt;
&lt;li&gt;For a given pair of room groups (everything under &lt;code&gt;a&lt;/code&gt; vs everything under &lt;code&gt;b&lt;/code&gt;, for example), there is exactly one path between them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That last point has some good and bad ramifications. On the bad side, it worsens replayability, because the corridors are roughly organized the same way from game to game. I noticed this while playtesting; after 3 games it's obvious that the rooms generally have the same layout.&lt;/p&gt;
&lt;p&gt;But those characteristics allowed me to take a simple approach to matching the theme of Ludum Dare 38: "A Small World." The first two splits don't have to be random; if they always split the sections evenly, then the map will have 4 even quadrants. I used this to create 4 distinct areas of increasing difficulty, so I could have a "one-level roguelike" with some actual progression.&lt;/p&gt;
&lt;p&gt;I split up the map like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+-------------------+--------------------+
|                   |                    |
|                   |                    |
|         aa        |         ba         |
|    (start here)   |     (end here)     |
|         |         |         ^          |
|---------|---------+---------|----------|
|         v         |         |          |
|                   |                    |
|         ab     -------&amp;gt;     bb         |
|                   |                    |
|                   |                    |
+----------------------------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The player starts in &lt;code&gt;aa&lt;/code&gt; and moves to &lt;code&gt;ab&lt;/code&gt;, then &lt;code&gt;bb&lt;/code&gt;, then &lt;code&gt;ba&lt;/code&gt;, where the goal is.&lt;/p&gt;
&lt;p&gt;Here's another map from early development, which splits the map in this way:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 2017-04-22 10.54.30.png" src="http://localhost:8000/img/rogue_basement/2EE2A79C08555276A852AAEA4DBEA9C7.png" /&gt;&lt;/p&gt;
&lt;p&gt;And here's one with just the first two partition lines, so you can see how the map is divided:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 2017-04-22 10.56.58.png" src="http://localhost:8000/img/rogue_basement/6F0FA752B4F575565A46B67ABF9120B6.png" /&gt;&lt;/p&gt;
&lt;p&gt;And finally, here are the hallways that mark the transitions between each section:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot 2017-04-22 11.40.44.png" src="http://localhost:8000/img/rogue_basement/360C018F2FCC756A1A59049EB36E67AA.png" /&gt;&lt;/p&gt;
&lt;p&gt;Originally the colors were just for debugging, but I ended up leaving them in place because they signal specialness.&lt;/p&gt;
&lt;p&gt;To add variety, I created a &lt;code&gt;rooms.csv&lt;/code&gt; file to define a few room types:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                                                      Monster   Item
Shape,      Difficulty, Monsters,   Chance, Color,    Density,  Density
box_random, 0.00,       *,          1.00,   #666666,  5.00,     5.00
box_random, 1.00,       *,          1.00,   #886666,  5.00,     4.00
box_random, 2.00,       *,          1.00,   #668866,  5.00,     3.00
box_random, 3.00,       *,          1.00,   #886688,  5.00,     2.00
box_full,   *,          verp_1      0.20,   #6666ff,  2.00,     4.00
                          |verp_2
                          |verp_3
                          |verp_4,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So within each quadrant, there is an 80% chance a room will have shape &lt;code&gt;box_random&lt;/code&gt;, a quadrant-specific color, 5 monsters per 100 tiles, 5 items per 100 tiles, and allow any area-appropriate monster. But there is a 20% chance that the room will have the shape &lt;code&gt;box_full&lt;/code&gt; (fill its entire BSP tree cell) and contain only verps, 2 per 100 tiles.&lt;/p&gt;
&lt;h1 id="inhabitants"&gt;Inhabitants&lt;/h1&gt;
&lt;h2 id="the-player"&gt;The player&lt;/h2&gt;
&lt;p&gt;The first inhabitant of the world is the player, represented by an &lt;code&gt;@&lt;/code&gt; (because the cell with the &lt;code&gt;@&lt;/code&gt; is "where you are at"). All world inhabitants, henceforth called "monsters" (after all, humans are the real monsters) and defined in &lt;code&gt;monsters.csv&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;id,     Char, Color,    Difficulty, Chance, Behaviors,          hp_max, strength, items
player, @,    #ffffff,  -1,         0.00,   keyboard_movement,  100,    5.00,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;"Difficulty" determines which quadrant a monster can spawn in. The player is a special case, so the level generator ignores it. The player moves in response to keyboard events, has 100 hit points, and hits other monsters for 5 damage. (The combat system in Rogue Basement is not sophisticated. There is no randomness. Remember, I had to be careful about where to spend innovation-points!)&lt;/p&gt;
&lt;h2 id="npcs"&gt;NPCs&lt;/h2&gt;
&lt;p&gt;Generally speaking, NPCs (non-player characters) in video games and tabletop RPGs are differentiated based on three important things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What they can do&lt;/li&gt;
&lt;li&gt;How they behave&lt;/li&gt;
&lt;li&gt;How many hits they take to kill, depending on what the player can do&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of those things affect the player's behavior, strategy, and tactics. For a time-constrained game like Rogue Basement, I wanted to stick to the absolute basics.&lt;/p&gt;
&lt;p&gt;The monsters are all defined in a CSV file (&lt;code&gt;monsters.csv&lt;/code&gt;). The very first monster I added was &lt;code&gt;v&lt;/code&gt;, the "verp":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;id,     Char, Color,    Difficulty, Chance, Behaviors,          hp_max, strength, items
verp,   v,    #ffff00,  0.00,       1.00,   beeline_visible,    10,     2.00,
                                            |random_walk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In human terms, that definition reads as: "The 'verp' monster, represented by a yellow &lt;code&gt;v&lt;/code&gt;, appears in difficulty-zero rooms (first quadrant) with a random weight of 1.0, moves randomly unless it sees the player in which case it moves toward them, has 10 hit points, does 2 damage to the player when hitting, and has no items at the game start."&lt;/p&gt;
&lt;p&gt;Behaviors are implemented as Python classes. After the player moves, each monster has a chance to move as well. Behaviors can be stacked, meaning that if one behavior decides it can't do anything, control can be passed to the next behavior in the list. So the verp's &lt;code&gt;beeline_visible&lt;/code&gt; behavior either says "I see the player, I move toward them" or "I do not see the player, let some other behavior act this turn."&lt;/p&gt;
&lt;p&gt;After adding the verps, I wanted to balance them out with a monster that attacks from a distance. I started by defining a behavior &lt;code&gt;range_5_visible&lt;/code&gt; which acts like &lt;code&gt;beeline_visible&lt;/code&gt;, but instead of trying to move onto the player's space, the monster tries to be exactly 5 tiles away. If the player approaches the monster, it will run away unless it is backed into a corner.&lt;/p&gt;
&lt;p&gt;I attached this behavior to a new enemy type, the &lt;code&gt;wibble&lt;/code&gt; (&lt;code&gt;w&lt;/code&gt;). But a monster that only runs away isn't very challenging! So it was time to deepen the simulation by adding items.&lt;/p&gt;
&lt;p&gt;Items have simple characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monsters (including the player) can hold them in an unlimited inventory.&lt;/li&gt;
&lt;li&gt;When a monster dies, its items are dropped on the ground.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I only had time to add one kind of item: the rock (&lt;code&gt;*&lt;/code&gt;). The rock has one use: you can throw it. When you do, the game spawns a new enemy with this definition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;id,             Char, Color,    Difficulty, Chance, Behaviors,        hp_max, strength, items
rock_in_flight, *,    #c1a073,  -1,         0,      path_until_hit,   2,      2,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since its "difficulty" is -1, it never spawns in the initial level. Its only behavior is to move along a path until it hits a wall, a monster, or the player. It has 2 hit points.&lt;/p&gt;
&lt;p&gt;This is a special item, so the game ignores the &lt;code&gt;strength&lt;/code&gt; and &lt;code&gt;items&lt;/code&gt; attributes in the CSV file. Instead, the &lt;code&gt;rock_in_flight&lt;/code&gt;'s strength value is taken from &lt;em&gt;the monster that threw the rock&lt;/em&gt;, and the original rock item is added to the &lt;code&gt;rock_in_flight&lt;/code&gt;'s inventory! When the &lt;code&gt;rock_in_flight&lt;/code&gt;'s &lt;code&gt;path_until_hit&lt;/code&gt; behavior detects that its life is over, the &lt;code&gt;rock_in_flight&lt;/code&gt; "dies" and the contents of its inventory (the &lt;code&gt;rock&lt;/code&gt;) are dropped on the ground.&lt;/p&gt;
&lt;p&gt;Now that I had throwable rocks, I could put a couple in each &lt;code&gt;wibble&lt;/code&gt;'s inventory and give them the ability to throw them. The &lt;code&gt;wibble&lt;/code&gt; definition looked like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;id,     Char, Color,    Difficulty, Chance, Behaviors,          hp_max, strength, items
wibble, w,    #90582c,  0.00,       20,     range_5_visible     10,     2,        ROCKx1
                                              |throw_rock_slow
                                              |sleep,
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I added a "sleep" behavior to differentiate wibbles from verps. When the player isn't around, verps are hyperactive and run around randomly; wibbles sit and meditate. It seemed in keeping with their fighting styles.&lt;/p&gt;
&lt;p&gt;That all worked great, but when wibbles ran out of rocks, the game got really easy! So I added another behavior, &lt;code&gt;pick_up_rocks&lt;/code&gt;, which makes a wibble either move toward any adjacent rocks, or pick them up if it's standing on one.&lt;/p&gt;
&lt;p&gt;The "conservation of rocks" principle introduces a new tactic into the game: players can pick up all the rocks to deprive the wibbles of their ammunition. Fortunately the player's backpack is infinitely large!&lt;/p&gt;
&lt;h2 id="stun-effect"&gt;Stun effect&lt;/h2&gt;
&lt;p&gt;At this point, combat consisted of punching verps and dodging or punching rocks. (Yeah, you can punch rocks! They are just monsters after all!) I wanted to make it possible to avoid almost all damage, though, by understanding the game's systems, and the verps made it too hard to do that by being relentless.&lt;/p&gt;
&lt;p&gt;So I made every hit by the player stun the target monster for 2 turns. This is done using a behavior called &lt;code&gt;stunnable&lt;/code&gt;, which just says "if I've been hit within the last 2 turns, turn blue and do nothing."&lt;/p&gt;
&lt;p&gt;For experienced roguelike players this makes the game easy once you figure it out, but I believe it's still a rewarding experience to figure it out in the first place. It is very, very difficult to make a game by yourself in 48 hours that has more than a few minutes of worthwhile gameplay, so I was aiming to just make those few minutes as good as possible and then let players feel like they could put it down after a good experience.&lt;/p&gt;
&lt;h2 id="healing"&gt;Healing&lt;/h2&gt;
&lt;p&gt;To make each section its own challenge, I decided to have the colored hallways between sections heal the player completely. This is another difficulty decrease that I could probably have left out, but I decided to err on the side of easy because I knew I had some user interface issues and wanted to be "extra" fair to players.&lt;/p&gt;
&lt;h1 id="unintended-consequences"&gt;Unintended consequences&lt;/h1&gt;
&lt;p&gt;The simulation has a few features I didn't intend, but that I don't regret—that's half the fun!&lt;/p&gt;
&lt;p&gt;These features mainly have to do with rocks, and the fact that when you throw them, they become monsters. Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can punch rocks out of the air.&lt;/li&gt;
&lt;li&gt;If you throw a rock, and then walk in its direction, you will punch it dead before it has a chance to move.&lt;/li&gt;
&lt;li&gt;If two wibbles throw rocks at you at the same time, they may collide in midair and die.&lt;/li&gt;
&lt;li&gt;You can embed rocks in walls. (Okay, not so happy about this one.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="atmosphere"&gt;Atmosphere&lt;/h1&gt;
&lt;h2 id="music"&gt;Music&lt;/h2&gt;
&lt;p&gt;I took 90 minutes to write 4 tracks, adding up to 11 minutes of music. Each map quadrant plays one of the tracks. &lt;a href="https://soundcloud.com/irskep/sets/rogue-basement-ost"&gt;You can listen to them here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The music fades down when you're in a colored hallway and fades up again when you enter a room in a map quadrant. My intention is to build tension and give the player a clue, in addition to the different colors, that the monsters are about to get tougher.&lt;/p&gt;
&lt;h2 id="title-screen"&gt;Title screen&lt;/h2&gt;
&lt;p&gt;I made this adorable title screen, and reused the ASCII art in the manual:&lt;/p&gt;
&lt;p&gt;&lt;img alt="title screen" src="http://localhost:8000/img/rogue_basement/screenshot1.png" /&gt;&lt;/p&gt;
&lt;h1 id="final-scores"&gt;Final scores&lt;/h1&gt;
&lt;p&gt;There were 1,104 "compo" (48-hour, one person) games, of which 549 had enough ratings to get scored and ranked. Here are the scores for Rogue Basement. Percentiles are within the 549 ranked games.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Rank&lt;/th&gt;
&lt;th&gt;Percentile&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;th&gt;# ratings&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Overall&lt;/td&gt;
&lt;td&gt;135&lt;/td&gt;
&lt;td&gt;75.4&lt;/td&gt;
&lt;td&gt;3.667&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fun&lt;/td&gt;
&lt;td&gt;179&lt;/td&gt;
&lt;td&gt;67.4&lt;/td&gt;
&lt;td&gt;3.409&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Innovation&lt;/td&gt;
&lt;td&gt;379&lt;/td&gt;
&lt;td&gt;31.0&lt;/td&gt;
&lt;td&gt;2.841&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Theme&lt;/td&gt;
&lt;td&gt;398&lt;/td&gt;
&lt;td&gt;25.5&lt;/td&gt;
&lt;td&gt;2.977&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Graphics&lt;/td&gt;
&lt;td&gt;374&lt;/td&gt;
&lt;td&gt;31.9&lt;/td&gt;
&lt;td&gt;2.932&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Audio&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;95.7&lt;/td&gt;
&lt;td&gt;4.000&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Humor&lt;/td&gt;
&lt;td&gt;157&lt;/td&gt;
&lt;td&gt;71.5&lt;/td&gt;
&lt;td&gt;3.000&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mood&lt;/td&gt;
&lt;td&gt;94&lt;/td&gt;
&lt;td&gt;82.9&lt;/td&gt;
&lt;td&gt;3.659&lt;/td&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I'm most interested in ratings as a measurement of how well-spent my effort
was in each area of the game. When you only have 48 hours to make a game, you
get on a path early and it's hard to get off of it if something isn't working.
That adds an enormous luck factor to things like "Fun" and "Innovation."&lt;/p&gt;
&lt;p&gt;It looks like the soundtrack was my secret weapon. Audio got a great score, and
I'm guessing that gave me a boost in Mood and Overall.&lt;/p&gt;
&lt;p&gt;The Theme score is very low, which I'm a little surprised at but also don't
care about.&lt;/p&gt;
&lt;p&gt;Innovation was one of my dump stats this round, so its low score makes sense too.
I did make a very by-the-book roguelike.&lt;/p&gt;
&lt;p&gt;Graphics was my other dump stat in that I used ASCII, but I'm a little hurt
that people didn't appreciate the aesthetic more.&lt;/p&gt;
&lt;p&gt;Humor was a wildcard. I mostly use humor in my games to
&lt;a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/LampshadeHanging"&gt;lampshade&lt;/a&gt;
silly situations or mechanics. Rogue Basement just has some flavor text and
ASCII art to justify your situation. I guess people appreciated it. (There's
also some not-so-great English in the log messages, and that might have played
a part.)&lt;/p&gt;
&lt;h1 id="takeaways"&gt;Takeaways&lt;/h1&gt;
&lt;h2 id="scope"&gt;Scope&lt;/h2&gt;
&lt;p&gt;Features I had planned to add but didn't:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiple basements and an overworld&lt;/li&gt;
&lt;li&gt;Health potions&lt;/li&gt;
&lt;li&gt;Fire/ice missiles&lt;/li&gt;
&lt;li&gt;2 more enemy types to use those missiles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From past experience, I knew that scope was always a problem, so I tackled the highest-priority mechanics first, which means I ended up with a real game instead of a tech demo.&lt;/p&gt;
&lt;h2 id="difficulty-is-hard"&gt;Difficulty is hard&lt;/h2&gt;
&lt;p&gt;It's very difficult to tune for difficulty without time to playtest and fix things! I kept making the game easier because developers almost always make games too hard on the first pass, and I wanted to overcompensate to make it more likely that people would finish it in one sitting.&lt;/p&gt;
&lt;p&gt;The feedback so far seems to indicate that the difficulty is just about right. No one says it's too hard, and some people say they've been playing for 25 minutes(!!!) and haven't beaten it yet.&lt;/p&gt;
&lt;h2 id="csvs-and-roguelikes-are-best-friends"&gt;CSVs and roguelikes are best friends&lt;/h2&gt;
&lt;p&gt;Every time I moved some data out of Python code into a CSV file, it got 10x easier to add new content, but not for the reason you might thing. Yes, copy/pasting CSV rows is an easy way to add new things, but the act of &lt;em&gt;designing&lt;/em&gt; the file format made me think about how the whole program worked and put flexible systems in place that would let me do more cool stuff later.&lt;/p&gt;
&lt;p&gt;I can already see the limitations of CSV, so I think next I'm going to switch to CSV, but with YAML values for each column. I really like the efficiency of editing CSV, but it's not flexible enough to do what I want.&lt;/p&gt;
&lt;h2 id="preparation-matters"&gt;Preparation matters&lt;/h2&gt;
&lt;p&gt;The week before Ludum Dare 38, I worked on an ASCII user interface and roguelike development framework. I didn't want to spend a bunch of time making a crappy title screen, I wanted to focus on gameplay! By writing and releasing the framework, I had all the relevant APIs in memory as soon as the competition started, and I could get going immediately on the important stuff.&lt;/p&gt;
&lt;h2 id="music-makes-a-difference"&gt;Music makes a difference&lt;/h2&gt;
&lt;p&gt;The music is really simple, but it adds a huge amount of atmosphere and is a strong signal of progression. It was time well spent, especially since when I made it (the middle of the night) my programmer brain wasn't working anymore. Most of the positive reviews mention the music.&lt;/p&gt;
&lt;h2 id="ascii-helps-you-focus-on-mechanics-but-has-a-score-cost"&gt;ASCII helps you focus on mechanics but has a score cost&lt;/h2&gt;
&lt;p&gt;Since ASCII is traditional for roguelikes, I thought I wouldn't lose too many points in graphics. In my opinion, good ASCII is better than bad pixel art. But I was wrong, and I was ranked in the bottom 35% of scored games.&lt;/p&gt;
&lt;p&gt;Even though I lost points on graphics, I'm glad I went with ASCII, because it gave me a lot more time to focus on mechanics and the design of my engine. I would consider using ASCII again next time, graphics score be damned.&lt;/p&gt;
&lt;h2 id="making-videos-ameliorates-loneliness"&gt;Making videos ameliorates loneliness&lt;/h2&gt;
&lt;p&gt;Whenever I felt like I hit a milestone, I did a quick &lt;a href="https://www.youtube.com/playlist?list=PLuzdytAQSpVhUCVgJvtgDNEQ2DI41KiKr"&gt;video update&lt;/a&gt;. I didn't really expect anyone to watch them, but it helped give me perspective on my progress. And it simulated human interaction a little bit, which was nice because I was alone in the house for the entire weekend.&lt;/p&gt;
&lt;h2 id="the-tech-stack-works"&gt;The tech stack works&lt;/h2&gt;
&lt;p&gt;I wrote the game in Python 3. For graphics, I used &lt;a href="http://foo.wyrd.name/en:bearlibterminal"&gt;BearLibTerminal&lt;/a&gt;. I played the music with &lt;a href="https://pyglet.org"&gt;pyglet&lt;/a&gt;. And for assorted algorithms, state management, and user interface features, I used my own &lt;a href="http://steveasleep.com/clubsandwich/"&gt;clubsandwich&lt;/a&gt; library. To package the game for OS X and Windows, I used &lt;a href="http://www.pyinstaller.org/"&gt;PyInstaller&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This combination works really well. The main downside is that calling C libraries from Python is slow, and I had to do some optimiziation work to get a decent frame rate. In the future, I might switch the graphics over to use pyglet entirely, but I really like using BearLibTerminal because of its limitations. You get a grid of tiles and nothing else. It's liberating.&lt;/p&gt;
&lt;h1 id="conclusion"&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This is probably the most fun game I have ever made, and ties for most fun making a game alongside my last Ludum Dare success.&lt;/p&gt;
&lt;p&gt;Thanks for reading! You can watch all this happen at super-speed in this timelapse video:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Jo8d34N3tdY?list=PLuzdytAQSpVhUCVgJvtgDNEQ2DI41KiKr" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="games"></category></entry><entry><title>Home audio with OS X and cheap consumer electronics</title><link href="http://localhost:8000/home-audio-with-os-x-and-cheap-consumer-electronics.html" rel="alternate"></link><published>2017-03-12T00:00:00-08:00</published><author><name>Steve Landey</name></author><id>tag:localhost:8000,2017-03-12:home-audio-with-os-x-and-cheap-consumer-electronics.html</id><summary type="html">&lt;p&gt;Since moving into our current house, Casey and I have been trying to make our living room audio setup seamless. This is a silly story with a lot of unnecessary detail about my adventures and choices in home audio setup.&lt;/p&gt;
&lt;h2 id="the-wish-list"&gt;The wish list&lt;/h2&gt;
&lt;p&gt;Music is our primary focus. We have no need to switch video. RCA and 3.5mm cables are the norm, not HDMI. This doesn’t prevent us from getting a receiver that supports RCA, but those tend to be bulky and have lots of buttons.&lt;/p&gt;
&lt;p&gt;We share a large MP3 library that we would both like to control. It’s easy enough to take turns plugging our computers or phones into an aux cable, but it’s so much more seamless to collaboratively queue things up in the same player. There’s a mix of Windows and OS X machines in the house, so the solution has to be multi-platform.&lt;/p&gt;
&lt;p&gt;We have a PC that functions as a TV and gaming machine. Latency is important for that use case, so wifi is out.&lt;/p&gt;
&lt;p&gt;Speaking of gaming, it would be nice to be able to hear two audio sources at a time. I often disable game soundtracks and play my own tunes.&lt;/p&gt;
&lt;p&gt;When people come stay with us, I want to be able to explain how it all works in less than 120 characters.&lt;/p&gt;
&lt;p&gt;And finally, I shouldn’t need to mess with it constantly. It should do everything we need without crashing or fiddling.&lt;/p&gt;
&lt;p&gt;I’ve tried a bunch of low-cost configurations, and this is what we have today. It’s reliable, predictable, and hits all the points above.&lt;/p&gt;
&lt;h2 id="mac-as-media-server"&gt;Mac as media server&lt;/h2&gt;
&lt;p&gt;I have an old Mac laptop from 2011. Here’s how I set it up to act as a media server and audio passthrough device. Note that I already have an amplifier for the speakers. If you don’t, well, maybe you’re better off with a regular receiver! Anyway, on to setup.&lt;/p&gt;
&lt;p&gt;Find an out-of-the-way location. Plug the laptop into the speakers and power. We’re about to set things up so you don’t need to be physically at the computer to manage it, so don’t worry about the location being convenient to access.&lt;/p&gt;
&lt;h3 id="initial-setup-seated-at-media-server"&gt;Initial setup (seated at media server)&lt;/h3&gt;
&lt;p&gt;Open System Preferences. Select Sharing. Check the “Remote Management” box, and when the drop-down opens, select “Observe” and “Control.”&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sharing preference pane" src="http://localhost:8000/img/home_audio_adventures/prefpane_sharing.png" /&gt;&lt;/p&gt;
&lt;p&gt;Set or remember the “Computer Name” field at the top. A nice, short name you could use would be &lt;code&gt;media-server&lt;/code&gt;. Going forward, I’m going to assume you used that name.&lt;/p&gt;
&lt;p&gt;Still in System Preferences, click the back button. Go to “Users &amp;amp; Groups”. Click “Login Options.” Make sure the “Automatic login:” menu is set to the user you want. (You may also need to go to “Security &amp;amp; Privacy” in System Preferences and uncheck “Disable automatic login.”)&lt;/p&gt;
&lt;p&gt;Install &lt;a href="http://semaja2.net/projects/insomniaxinfo/"&gt;InsomniaX&lt;/a&gt; if you’re using a laptop. This will let you close the lid without putting the laptop to sleep. Once installed and running, open the menu, and make sure Preferences &amp;gt; “Start on Login” is checked.&lt;/p&gt;
&lt;p&gt;Now close the lid and head to another Mac so you can configure things more comfortably!&lt;/p&gt;
&lt;h3 id="remaining-setup-remote"&gt;Remaining setup (remote)&lt;/h3&gt;
&lt;p&gt;On Mac number two, open a Finder window. In the Finder menu bar, select Go &amp;gt; Network or hit Command+Shift+K. Pick &lt;code&gt;media-server&lt;/code&gt; from the list and click the Share Screen button. Enter your username and password for your account on the media server.&lt;/p&gt;
&lt;p&gt;You should see a list with &lt;code&gt;media-server&lt;/code&gt; init. Click it. There should be a “Share Screen…” button. Click it. Enter your username and password from &lt;code&gt;media-server&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Network folder in Finder" src="http://localhost:8000/img/home_audio_adventures/finder_network.png" /&gt;
￼
(I call mine “fiona.”)&lt;/p&gt;
&lt;p&gt;Before you really get going, you might want to take some time to open your wifi router’s settings and assign a dedicated internal IP to the media server. Macs will be able to connect to it as &lt;code&gt;media-server.local&lt;/code&gt;, but Windows machines won’t. I won’t provide specific instructions here due to the infinite variety of router software, but it was pretty simple on my Airport Extreme.&lt;/p&gt;
&lt;p&gt;From here there are a ton of things you can do, so I’ll organize the rest of this post by topic.&lt;/p&gt;
&lt;h2 id="spotify"&gt;Spotify&lt;/h2&gt;
&lt;p&gt;Spotify is easy to set up but limited to one user. Install Spotify on the media server, sign in to it, and ask it to launch itself on login. (Menu -&amp;gt; Spotify -&amp;gt; Preferences, Show Advanced Settings, Open Spotify automatically after you log in to the computer.)&lt;/p&gt;
&lt;p&gt;Your devices can now control Spotify on the media server, but you have to be logged in as you. Even with family sharing, there’s no way to share a device among multiple user accounts without going for a super-technical solution like &lt;a href="https://github.com/dirkgroenen/mopidy-mopify"&gt;mopidy-mopify&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In our case, this means one of us has to use aux or Bluetooth to play Spotify through the speakers. &lt;/p&gt;
&lt;h2 id="mp3s"&gt;MP3s&lt;/h2&gt;
&lt;p&gt;All of my solutions to the MP3 library problem are, unfortunately, pretty technical. I don’t have any recommendations for people who are not comfortable with the terminal.&lt;/p&gt;
&lt;p&gt;The best-documented ways to share an MP3 library are &lt;a href="https://www.musicpd.org"&gt;mpd&lt;/a&gt; and &lt;a href="https://www.mopidy.com"&gt;mopidy&lt;/a&gt;. Both solutions mostly work but are broken in some annoying way and don’t have any truly great clients.&lt;/p&gt;
&lt;p&gt;I prefer to use my own project, &lt;a href="https://github.com/irskep/summertunes"&gt;Summertunes&lt;/a&gt;. It glues together the &lt;a href="http://beets.io"&gt;beets&lt;/a&gt; extensible music library manager and &lt;a href="https://mpv.io"&gt;mpv&lt;/a&gt; player in an iTunes-like web interface. That means Casey and I can control the same library and playlist from any web browser on any device, including our phones. It’s responsive and reliable.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Summertunes" src="http://localhost:8000/img/home_audio_adventures/summertunes.png" /&gt;&lt;/p&gt;
&lt;p&gt;I use &lt;a href="http://www.soma-zone.com/LaunchControl/"&gt;LaunchControl&lt;/a&gt; with some shell scripts to run &lt;code&gt;mpd&lt;/code&gt; and Summertunes on login, so I never need to mess with them manually unless they break.&lt;/p&gt;
&lt;p&gt;I recommend &lt;a href="https://github.com/CDrummond/cantata/releases"&gt;Cantata&lt;/a&gt; as an MPD client. It’s not very Mac-like, but it’s easy enough to find your way around.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cantata" src="http://localhost:8000/img/home_audio_adventures/cantata.png" /&gt;&lt;/p&gt;
&lt;p&gt;We only use MPD if I’m actively working on Summertunes and have temporarily hosed the installation. So about once per month.&lt;/p&gt;
&lt;h2 id="input-passthrough"&gt;Input passthrough&lt;/h2&gt;
&lt;p&gt;The Mac takes care of a lot by itself, but we still need to support a home theater PC, Bluetooth adapter, and 3.5mm aux cable. Some external hardware is necessary.&lt;/p&gt;
&lt;p&gt;We could have the Mac output to a switch, but I’d rather just have everything merged into one signal so the music players work 100% of the time without having to remember what channel something is on. We can accomplish this using &lt;a href="https://rogueamoeba.com/soundsource/"&gt;SoundSource&lt;/a&gt;, a $10 utility that lets you mirror your Mac’s audio input to its output.&lt;/p&gt;
&lt;p&gt;Buy SoundSource, run it, select “Open Play-Thru Window” in the menu, and click “Start Play-Thru.” You’ll need to hit this button after every reboot, unfortunately. If you use SoundSource for this purpose, please join me in sending feature request via their &lt;a href="https://rogueamoeba.com/support/knowledgebase/?showCategory=SoundSource"&gt;support form&lt;/a&gt; asking them to let us auto-enable it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SoundSource" src="http://localhost:8000/img/home_audio_adventures/soundsource.png" /&gt;&lt;/p&gt;
&lt;h2 id="audio-switching"&gt;Audio switching&lt;/h2&gt;
&lt;p&gt;At this point, we’ve got a Mac hosting a music library and Spotify, which will pass through any input we send to it through its line-in port. We need to add Bluetooth, 3.5mm aux, and a home theater PC.&lt;/p&gt;
&lt;p&gt;I spent &lt;em&gt;hours&lt;/em&gt; on Amazon trying to find a device that does nothing but switch between 3 RCA or 3.5mm inputs, and has a remote control. The reason this is hard to find is that most people use a stereo receiver, which is both an amplifier and a switch. &lt;a href="https://www.amazon.com/Yamaha-R-S202BL-Stereo-Receiver/dp/B01EMQI2CU/"&gt;(Example, $150.)&lt;/a&gt; Stereo receiver remote controls never have fewer than 30 buttons. I don’t want anything in my house that has a D-pad and isn’t gaming controller.&lt;/p&gt;
&lt;p&gt;I found exactly one device that fits my requirements: &lt;a href="https://www.amazon.com/gp/product/B01HGISAOQ/"&gt;“iKKEGOL 5 Ways 4 Port IN 1 Out Video Audio S-Video Game AV Switch Box Selector with Remote Control Av-666d Black”&lt;/a&gt;. It was twenty bucks and its remote has five buttons: four for input selection, one for power.&lt;/p&gt;
&lt;p&gt;&lt;img alt="The switch" src="http://localhost:8000/img/home_audio_adventures/switch.jpg" /&gt;&lt;/p&gt;
&lt;h2 id="bluetooth"&gt;Bluetooth&lt;/h2&gt;
&lt;p&gt;All Bluetooth devices for home use are garbage, but some are less garbage than others. I have had okay but not great luck with &lt;a href="https://www.amazon.com/gp/product/B016NUTG5K/"&gt;this adapter from Esinkin&lt;/a&gt; and was totally dissatisfied by &lt;a href="https://www.amazon.com/gp/product/B00SW0523A/"&gt;this one from iKross&lt;/a&gt;. I didn’t realize it at the time, but &lt;a href="http://thewirecutter.com/reviews/best-bluetooth-audio-receiver-for-your-home-stereo-or-speakers/"&gt;The Wirecutter has some suggestions that might be better.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We use Bluetooth a lot less now that Summertunes is working and populated, so I care about this a lot less than I used to.&lt;/p&gt;
&lt;h2 id="pieces-of-flair"&gt;Pieces of flair&lt;/h2&gt;
&lt;p&gt;Every home across America with more than one audio source has a unique and probably awful system for getting audio from point A to point B. Ours is particularly unique! So I designed this handy reference card, and Casey printed it out on our brand new &lt;a href="https://cricut.com"&gt;Cricut&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The switch" src="http://localhost:8000/img/home_audio_adventures/reference_card.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Casey also gave the switcher remote the Cricut-assisted personal touch:&lt;/p&gt;
&lt;p&gt;&lt;img alt="The switch" src="http://localhost:8000/img/home_audio_adventures/remote.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;We’re still left with a minor cable nest, but the volume of the whole setup is only about two Macbook Pros.&lt;/p&gt;
&lt;h2 id="parting-thoughts"&gt;Parting thoughts&lt;/h2&gt;
&lt;p&gt;After writing all this out, the first question I had for myself was whether it was all worth it. Shouldn’t I have just bought a stereo receiver?&lt;/p&gt;
&lt;p&gt;I’m still glad I didn’t, if only because of those damn remote controls. And the mixing of two sources is really nice.&lt;/p&gt;
&lt;p&gt;The only downside is that the switch I ended up with is not very well built and introduces a tiny bit of hum. The remote has to be pointed straight at it for it to work, too. But on the other hand, it’s simpler than any other home audio system I’ve used.&lt;/p&gt;</summary><category term="audio"></category></entry><entry><title>Blogging about iOS architecture at Hipmunk</title><link href="http://localhost:8000/ios-at-hipmunk.html" rel="alternate"></link><published>2016-08-25T00:00:00-07:00</published><author><name>Steve Landey</name></author><id>tag:localhost:8000,2016-08-25:ios-at-hipmunk.html</id><summary type="html">&lt;p&gt;I wrote about the work I've been doing at Hipmunk over the past year
over on over at the &lt;a href="https://hipmunk.github.io/posts/2016/Aug/19/taming-hipmunks-ios-code/"&gt;Hipmunk engineering blog&lt;/a&gt;.&lt;/p&gt;</summary><category term="ios"></category></entry><entry><title>Sometimes they call me Slam Jamsen</title><link href="http://localhost:8000/slam-jamsen-salvage-operation-ep.html" rel="alternate"></link><published>2015-04-25T00:00:00-07:00</published><author><name>Steve Landey</name></author><id>tag:localhost:8000,2015-04-25:slam-jamsen-salvage-operation-ep.html</id><summary type="html">&lt;p&gt;&lt;a href="http://slamjamsen.com/"&gt;&lt;img alt="Salvage Operation EP album art" src="https://f4.bcbits.com/img/a2439303327_16.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Graffiti Labs is shutting down next month. I'll be spending June looking for
a new job &lt;em&gt;(edit: found one!)&lt;/em&gt; and honing my audio engineering skills.&lt;/p&gt;
&lt;p&gt;As my first act of freedom, I'm releasing &lt;strong&gt;&lt;a href="http://slamjamsen.com/"&gt;Slam Jamsen's Salvage Operation
EP!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a collection of “bedroom tapes” made between 2005 and 2009. The popular vision of a budding high school rock musician is a guitarist sitting on a bed writing bad love songs, but in my case, I was at a desk with a low-end Mac and a MIDI keyboard, sharing the room with two more computers and a treadmill, writing bad video game soundtracks.&lt;/p&gt;
&lt;p&gt;Since the rise of the 4-track, the cost of making decent home recordings has fallen at different rates for different genres. As a so-so piano student and early-to-mid-‘00s Mac user, my options were limited at first to MIDI editors. When Apple’s Garageband program came out, and I finally got a copy, I discovered the world of software synthesizers.&lt;/p&gt;
&lt;p&gt;Video game development was my other major hobby at the time, so it seemed obvious that I should write my own soundtracks. (Otherwise, I wouldn’t have soundtracks at all, given my $0 budget.) My modus operandi was to constantly write songs for soundtracks for games that didn’t exist yet, and pull out the best ones from my catalogue when I actually made a game.&lt;/p&gt;
&lt;p&gt;Four of the tracks on this EP come from that process. Duty Calls was made for Escort Wing, a game designed and mostly programmed by Will Hogben. Glue Me Together and The Creature Sneaks were made for gw0rp, my entry into uDevGames 2008. Catastrophe Prelude was never used for anything, but written for a nonexistent game.&lt;/p&gt;
&lt;p&gt;In 2007, I built a Blue Man Group-style PVC instrument for a science competition. Once built, it was too tempting to pass up making music with it, so I wrote Parakeet in the E.R., Unsolved, and a few more songs that don’t appear on this EP. Those tracks also feature my classmates Amanda Andrews with bizarro-world guitar parts, and Eric Baize with an ocarina. My brother Phil played the bluesy intro to Unsolved. “Wheeee!” was made in the same batch, but doesn’t feature the PVC instrument.&lt;/p&gt;
&lt;p&gt;That just leaves The Five Dollar Song, which I’ll just say was mostly written and played by Phil, with contributions from me, around 2005.&lt;/p&gt;
&lt;p&gt;Good free synthesizers that appear on this EP and are still around include daHornet, Automat, and Remedy.&lt;/p&gt;</summary><category term="music"></category></entry><entry><title>I played drums on this EP</title><link href="http://localhost:8000/the-nest-ep.html" rel="alternate"></link><published>2015-04-20T00:00:00-07:00</published><author><name>Steve Landey</name></author><id>tag:localhost:8000,2015-04-20:the-nest-ep.html</id><summary type="html">&lt;p&gt;&lt;a href="http://jams.thenestmusic.com/releases"&gt;&lt;img alt="The Nest EP album art" src="http://f4.bcbits.com/img/a2623181876_16.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My band The Nest just put out its first EP.
&lt;a href="http://jams.thenestmusic.com/releases"&gt;Listen to it here!&lt;/a&gt;&lt;/p&gt;</summary><category term="music"></category></entry><entry><title>I played bass on this album</title><link href="http://localhost:8000/anthony-presti-album.html" rel="alternate"></link><published>2014-04-29T00:00:00-07:00</published><author><name>Steve Landey</name></author><id>tag:localhost:8000,2014-04-29:anthony-presti-album.html</id><summary type="html">&lt;p&gt;&lt;a href="https://anthonyprestimusic.bandcamp.com/album/clarity-in-hindsight"&gt;&lt;img alt="Clarity in Hindsight album art" src="https://f4.bcbits.com/img/a4160820184_16.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I just returned from recording an album with SF local artist Anthony Presti.
&lt;a href="https://anthonyprestimusic.bandcamp.com/album/clarity-in-hindsight"&gt;Check it out on Bandcamp!&lt;/a&gt;&lt;/p&gt;</summary><category term="music"></category></entry><entry><title>The New Dork Times</title><link href="http://localhost:8000/the-new-dork-times.html" rel="alternate"></link><published>2013-08-02T00:00:00-07:00</published><author><name>Steve Landey</name></author><id>tag:localhost:8000,2013-08-02:the-new-dork-times.html</id><summary type="html">&lt;p&gt;I did the best writing of my life in 1997 when I was eight years old, sitting
at an old PC with my friend Eric Drury to write the New Dork Times. Although it
ran for only nine issues published between 1997 and 1999, its biting social
commentary remains as relevant as ever.&lt;/p&gt;
&lt;p&gt;Earlier this year I came across my personal archives of all nine issues of the
New Dork Times and decided they were worth two hours of attention to bring to a
modern digital audience. I now present to you an online time capsule from 16
years ago, lovingly typeset in its original Times New Roman:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://steveasleep.com/newdorktimes/"&gt;The New Dork Times – Digital Edition&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary><category term="projects"></category></entry><entry><title>We Dreamers postmortem</title><link href="http://localhost:8000/we-dreamers-postmortem.html" rel="alternate"></link><published>2013-05-04T00:00:00-07:00</published><author><name>Steve Landey</name></author><id>tag:localhost:8000,2013-05-04:we-dreamers-postmortem.html</id><summary type="html">&lt;p&gt;We Dreamers is an abstract online sandbox that placed sixth in the Innovation
category of Ludum Dare 26.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot of We Dreamers" src="http://localhost:8000/img/content/we_dreamers.jpg" /&gt;&lt;/p&gt;


&lt;p&gt;&lt;a href="http://steveasleep.com/we_dreamers_2"&gt;You can play it here.&lt;/a&gt; (&lt;a href="http://ludumdare.com/compo/ludum-dare-26/?action=preview&amp;amp;uid=3120"&gt;Ludum Dare page&lt;/a&gt;) It may take a
while for the 4+ MB of user data to download, so give it a minute or two. Here's
ten seconds of it:&lt;/p&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/2bmRw-QD1Bs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Of all my programming escapades over the past couple of years, I'm most proud
of this one. Here's a comprehensive collection of my thoughts about it,
including a discussions of the technical aspects.&lt;/p&gt;
&lt;h1 id="conception"&gt;Conception&lt;/h1&gt;
&lt;p&gt;During the final voting round for Ludum Dare 26, I spent a couple of hours
coming up with good ideas for every possible theme…except minimalism. No way
that would get through, right?&lt;/p&gt;
&lt;p&gt;When that theme was chosen, and I had to throw out all of my wonderful schemes,
most of which were single player pseudo-roguelikes. Instead, I picked a vague
idea: a web-based multiplayer world where you dig out rooms underground in a
grid. Maybe there would be shapes and colors and stuff. Genius! I figured out
the rest as I went along.&lt;/p&gt;
&lt;p&gt;You can do a few things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Move with the arrow keys or WASD.&lt;/li&gt;
&lt;li&gt;Harvest color with space.&lt;/li&gt;
&lt;li&gt;Dig out new rooms by bumping into walls. You need color to do this. The new 
   room will be the color of your dot, which is affected by the color in your 
   bucket.&lt;/li&gt;
&lt;li&gt;Dump color with r, g, and b (or 1, 2, and 3) to change the color of your dot.&lt;/li&gt;
&lt;li&gt;Leave notes on rooms (if you are level 2) that appear at the bottom of the 
   screen when you enter the room.&lt;/li&gt;
&lt;li&gt;Put down big block letters (if you are level 3) that you can use to spell 
   [sometimes naughty] words.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You gain levels by adding content. If anyone else is online at the same time as
you, you can see their dot and any content they add, all live-updated.&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot" src="http://www.ludumdare.com/compo/wp-content/uploads/2013/05/2m-300x207.png" /&gt;&lt;/p&gt;
&lt;h1 id="competition-results"&gt;Competition results&lt;/h1&gt;
&lt;p&gt;It placed 6th in the Innovation category out of 2,346 games. The rest of the
category scores aren't as impressive as raw numbers but are still nice in terms
of the number of games:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Ranking&lt;/th&gt;
&lt;th&gt;Score&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Innovation&lt;/td&gt;
&lt;td&gt;#6&lt;/td&gt;
&lt;td&gt;4.38&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mood&lt;/td&gt;
&lt;td&gt;#210&lt;/td&gt;
&lt;td&gt;3.36&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Overall&lt;/td&gt;
&lt;td&gt;#238&lt;/td&gt;
&lt;td&gt;3.51&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Audio&lt;/td&gt;
&lt;td&gt;#464&lt;/td&gt;
&lt;td&gt;2.85&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Theme&lt;/td&gt;
&lt;td&gt;#492&lt;/td&gt;
&lt;td&gt;3.60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Humor&lt;/td&gt;
&lt;td&gt;#549&lt;/td&gt;
&lt;td&gt;2.23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Graphics&lt;/td&gt;
&lt;td&gt;#650&lt;/td&gt;
&lt;td&gt;2.92&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fun&lt;/td&gt;
&lt;td&gt;#769&lt;/td&gt;
&lt;td&gt;2.75&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;People tend to have one of two viewpoints. They’re either like
&lt;a href="http://www.ludumdare.com/compo/ludum-dare-26/?action=preview&amp;amp;uid=22915"&gt;wrongcoder&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Neat. Quite unique. Technologically a marvel for the available time. To be
honest, though, I don’t get the purpose of it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;or they’re like &lt;a href="http://www.ludumdare.com/compo/ludum-dare-26/?action=preview&amp;amp;uid=8308"&gt;BlennosoftGames&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is something very cheerful about this game. As far as I can tell you
don’t “win” you just smile :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Most players were in the second category, so I’m very happy with how it turned
out. People seem to understand what I’m trying to do: create a virtual canvas
where contribution is easy, bad behavior is difficult, and quirky things can be
found given a few minutes’ exploration.
&lt;a href="http://www.ludumdare.com/compo/ludum-dare-26/?action=preview&amp;amp;uid=11022"&gt;Hegemege&lt;/a&gt;
said it “felt a bit like geocaching,” which really tickles me.&lt;/p&gt;
&lt;p&gt;The numbers are encouraging as well. When I checked earlier today, there were
&lt;strong&gt;3,019 rooms dug by 147 users.&lt;/strong&gt; 54% of players dug 5 or more rooms, with some
people digging over 100 rooms. 11% had a note on them. 18% had a stamp. So
people were definitely doing more than running around and bumping into walls.&lt;/p&gt;
&lt;p&gt;At first I was surprised that more rooms had stamps than notes, since you have
to be level 2 to write a note, and level 3 to place a stamp. But it was pointed
out to me that a stamp is just one letter, and you have to think a lot less to
put one down. Want to spell DOG FART in huge letters? It’s only seven easy
pieces!&lt;/p&gt;
&lt;p&gt;I got a friendly nod from a post on &lt;a href="http://indiestatik.com/2013/04/29/ludum-dare-26/"&gt;Indie Statik's Ludum Dare
highlights&lt;/a&gt;. They compared We
Dreamers to Peter Molyneux’s game Curiosity. I'm not sure if that's a
compliment, but it’s still nice to be noticed. They have a &lt;a href="http://indiestatik.com/2013/05/02/ludum-dare-25-part-2/"&gt;second highlights
post&lt;/a&gt; as well.&lt;/p&gt;
&lt;h1 id="technical-details"&gt;Technical details&lt;/h1&gt;
&lt;p&gt;You might be wondering, like
&lt;a href="http://www.ludumdare.com/compo/ludum-dare-26/?action=preview&amp;amp;uid=20822"&gt;StuStutheBloo&lt;/a&gt;
in We Dreamers’s comments, &lt;strong&gt;“How did you even put this together in the time
available?”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The short answer is that I used &lt;a href="https://www.firebase.com/"&gt;Firebase&lt;/a&gt;, “a cloud
database designed to power real-time, collaborative applications.” Put another
way, it’s a magic, event-driven Javascript object that updates instantly across
all clients. I didn’t have to write a server, or even deal with much
multiplayer logic at all; I just designed all interactive objects to listen to
Firebase events. The only thing special about the dot you control, as opposed
to those controlled by others and displayed on your screen, is that your client
is updating a Firebase subtree for your data. Those updates are reflected
instantly for you, and very quickly for everyone else.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you want to try your hand at a multiplayer online game for Ludum Dare, I
strongly recommend that you try Firebase.&lt;/strong&gt; There are half a dozen two-player
games I haven’t been able to rate because I’d need to have another person
sitting next to me to play with. You don’t even need to get all crazy and
realtime – it’s also perfect for turn-based games. I hope to try something
head-to-head next time.&lt;/p&gt;
&lt;p&gt;Now for a longer answer to StuStutheBoo’s question. Although Firebase was
essential to having the technical capability to build this kind of online
experience, it was even more important that I knew my tools extremely well. My
day job is to work on &lt;a href="http://playbuildy.com/"&gt;Buildy&lt;/a&gt;, an online multiplayer
realtime building sandbox where you can make just about anything. For LD26, I
brought out the same tools we use to make Buildy: HTML5, CSS,
&lt;a href="http://coffeescript.org/"&gt;Coffeescript&lt;/a&gt;, &lt;a href="http://gruntjs.com/"&gt;Grunt&lt;/a&gt;,
&lt;a href="https://github.com/raimohanska/bacon.js"&gt;Bacon.js&lt;/a&gt;,
&lt;a href="http://www.schillmania.com/projects/soundmanager2/"&gt;SoundManager2&lt;/a&gt;,
&lt;a href="http://jquery.com/"&gt;jQuery&lt;/a&gt;, &lt;a href="http://craig.is/killing/mice"&gt;Mousetrap&lt;/a&gt;, and
&lt;a href="http://underscorejs.org/"&gt;underscore.js&lt;/a&gt;. The whole game is a bunch of static
files hosted on Github Pages, just like the rest of steveasleep.com.  To
deploy, all I had to do was push to the &lt;code&gt;gh-pages&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;I didn’t do anything I hadn’t done before. All of the rendering is just styled
&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements. I’m familiar with each of those Javascript libraries. I’m
comfortable with the Chrome dev tools. Static files are incredibly easy to
deploy and serve without paying a dime. As a result of using all these familiar
pieces, I spent almost no time debugging simple (or even complicated) issues.&lt;/p&gt;
&lt;p&gt;If you’re looking for advice about how to do Ludum Dare well, here’s mine:
&lt;strong&gt;learn your tools.&lt;/strong&gt; Make sure you know how to write, run, and deploy your
game.  Don’t give yourself any surprises. (Python developers have a
particularly tough time with this one. There are still a few that ask you to
install PyGame to play and rate their game. I sympathize, having used py2app
for LD19.)&lt;/p&gt;
&lt;p&gt;If you spend any time in Javascript, try to get your head around
&lt;a href="https://github.com/raimohanska/bacon.js"&gt;Bacon.js&lt;/a&gt;. It can decrease game logic
complexity by quite a lot if you’re willing to invest your brain resources in
it. We Dreamers would have had 30% more code and been 30% buggier without it.&lt;/p&gt;
&lt;h1 id="downsides-and-difficulties"&gt;Downsides and difficulties&lt;/h1&gt;
&lt;p&gt;There’s another, secret reason why I was able to write We Dreamers so fast: I
didn’t give more than a passing thought about scale. I had no idea how much
data users would generate (currently ~4 MB) or how well browsers would deal
with 6000+ DOM elements moving around (not very well). Buildy partitions its
worlds into squares, so it’s easy to only load a piece at a time. We Dreamers
has no such wisdom, so every user loads the entire world when the page loads.
Threeish megabytes isn’t so bad for a game, but DOM performance turned out to
be a huge issue once things got big. To help players deal with the speed, I now
provide a stripped down version that web browsers can handle better.&lt;/p&gt;
&lt;p&gt;I chose to do all the rendering via styled &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s because I wanted to spend
as little time as possible on drawing code. I gambled that web browsers would
be smart enough to efficiently clip offscreen nodes. It almost worked, but I
really should have used &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;. It wouldn't have been much more work.&lt;/p&gt;
&lt;p&gt;I had a tiny bit of trouble with cross-browser compatibility.
&lt;code&gt;requestAnimationFrame&lt;/code&gt; still hasn’t been un-prefixed in Firefox or Safari.
Safari didn’t like any of the CSS gradient variants I tried either, so the
doors are all white when viewed in that browser. In the end, though, I was able
to make it widely compatible and consistent. (This is another issue that would
have been avoided had I used &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;Despite using Firebase, here was one aspect of distributed computing I did have
to deal with: syncing the time across all clients to get the color harvesting
to look right. I thought I was being clever by using a public web service that
gives you the current time in JSON. Unfortunately it’s hosted on Google App
Engine and blew through its quota soon after voting started, so now all the
players’ clocks are wrong anyway. It doesn’t affect the game much, but I should
have seen it coming.&lt;/p&gt;
&lt;p&gt;There was one last issue that I was always aware of but never had time to deal
with: access controls. There are no API-level restrictions on who can edit what
data. At least one person exploited it to leave me an amusing note, but
fortunately there were no abusers. Firebase has the ability to use access
controls, but I didn't have time to learn their API. Another reason to know
my tools really well, I suppose.&lt;/p&gt;
&lt;h1 id="in-closing"&gt;In closing,&lt;/h1&gt;
&lt;p&gt;I had a fun and intense time this year. Of my three attempts to date, We
Dreamers is far and away my best Ludum Dare effort yet. I plan to come back for
another round in August for LD27.&lt;/p&gt;
&lt;h1 id="appendix-my-favorite-reviews"&gt;Appendix: my favorite reviews&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Ooh, collaborative art! I liked the idea and of course took the liberty of leaving my mark on the world. Makes me happy! Thanks!
-semi&lt;/p&gt;
&lt;p&gt;I really enjoyed my play session. Had a good time reading all kind of different messages and just messing around. 
I love the collaborative stuff and the openness. Art is cool and the sound is charming. It is also a nice piece of tech.
-PsenFilip&lt;/p&gt;
&lt;p&gt;There is something very cheerful about this game. As far as I can tell you don't "win" you just smile :)
-BlennosoftGames&lt;/p&gt;
&lt;p&gt;I love open-ended and creative games! I had fun just wandering around reading everyone else's notes. I might have to come back later to do some more exploring ;)
-cardboard&lt;/p&gt;
&lt;p&gt;This is beautiful. Found some really awesome messages, had fun following a huge tunnel dug by Lies, and then spent some time extending it even further myself. Tried to make sure to leave some inspiration bits around too. Amazing stuff, I love it.
-SnoringFrog&lt;/p&gt;
&lt;p&gt;As someone else pointed out, this is an awesomely artsy guestbook. A very neat idea, and a technical prowess for the time constraints, that shows you've got some deadly programming chops. &lt;/p&gt;
&lt;p&gt;All in all, a nice collaborative experience, very fitting of the theme. I'm just not too much into games without any gameplay to them - yeah, the ages old debate about games as art :) 
-TenTonToon&lt;/p&gt;
&lt;p&gt;That is a very interesting entry, and I loved the technical details. &lt;/p&gt;
&lt;p&gt;I think it would be kind of cool if there was some sort of "decay", so that after a few days, some of the painted cells would go white and then fill again - as to keep the instalation fresh. &lt;/p&gt;
&lt;p&gt;Also, having some sort of minimap or full view mode would be really great. (The browser's native zoom doesn't go very far...) &lt;/p&gt;
&lt;p&gt;Thanks for the game!
-caranha&lt;/p&gt;
&lt;p&gt;I just had the most interesting conversation with a wall, containing soul fragments of past dreamers. 
It's like a dream: you cannot predict what you will find, but you'll always walk on the path of an interesting weird journey. 
THANK YOU stevejohnson. &lt;/p&gt;
&lt;p&gt;Oh. And too bad that the sound reacts sometimes badly when travelling to many successive tiles of various colors. It makes it hard to create music :D
-Chronodrax&lt;/p&gt;
&lt;p&gt;So this is a unique world for all players? Like an artistic MMO? This is extra-cool, a piece of art made by people around the world
-atraxgames&lt;/p&gt;
&lt;p&gt;Nice bit of minimalist brain rot. Have some upstars.
-swizzcheez&lt;/p&gt;
&lt;p&gt;this is a good gam
-evelyn-jolli&lt;/p&gt;
&lt;p&gt;Neat. Quite unique. Technologically a marvel for the available time. To be honest, though, I don't get the purpose of it.
-wrongcoder&lt;/p&gt;
&lt;p&gt;WrongCoder I left you a bunch of messages in rooms but you didn't reply :( &lt;/p&gt;
&lt;p&gt;This was fantastic. How did you even put this together in the time available?
-StuStutheBloo&lt;/p&gt;
&lt;p&gt;Cool stuff with Firebase! 
I have just started checking out BaaSes myself and this just reinforces my idea of just how fast you can get up and running to prototype new concepts. Haven't seen Bacon.js before, looks interesting. Would be nice to see some more in-depth post-mortem on this :)
-Legogris&lt;/p&gt;
&lt;p&gt;It might be cool to make a way for people to have a local version of this for their own social group. I don't know what that would achieve, it just seems like it would work somehow.
-nintendoeats&lt;/p&gt;
&lt;p&gt;Wow, beautiful. Defies definition. Thank you!
-CherryNukaCola&lt;/p&gt;
&lt;p&gt;Fun! Felt a bit like geocaching :P
-Hegemege&lt;/p&gt;
&lt;p&gt;Now that's a fun guestbook :D
-gerritg&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="games"></category></entry><entry><title>Rendering Buildy’s satellite view: PhantomJS, Beanstalkd, Leaflet, and PIL</title><link href="http://localhost:8000/rendering-buildys-satellite-view.html" rel="alternate"></link><published>2012-11-21T00:00:00-08:00</published><author><name>Steve Landey</name></author><id>tag:localhost:8000,2012-11-21:rendering-buildys-satellite-view.html</id><summary type="html">&lt;p&gt;&lt;img alt="Screenshot of Buildy" src="http://localhost:8000/img/buildy.png" /&gt;&lt;/p&gt;
&lt;p&gt;A world in Buildy can be hundreds of square miles. I &lt;a href="http://blog.playbuildy.com/2012/11/21/rendering-buildys-satellite-view-phantomjs-beanstalkd-leaflet-and-pil/"&gt;wrote about the
combination of technologies we use to render and display enormous zoomed out
world views on the Buildy Blog&lt;/a&gt;.&lt;/p&gt;</summary><category term="programming"></category></entry><entry><title>One thousand users put 250,000 objects in Buildy in 18 hours</title><link href="http://localhost:8000/1k-hacker-news-readers-on-buildy.html" rel="alternate"></link><published>2012-11-14T00:00:00-08:00</published><author><name>Steve Landey</name></author><id>tag:localhost:8000,2012-11-14:1k-hacker-news-readers-on-buildy.html</id><summary type="html">&lt;p&gt;&lt;img alt="Screenshot of Buildy" src="http://localhost:8000/img/buildy2.png" /&gt;&lt;/p&gt;
&lt;p&gt;We posted Buildy on Hacker News and it was on the front page for 17 hours. I
shared &lt;a href="http://blog.playbuildy.com/2012/11/14/hn-postmortem/"&gt;some observations and experiences on the Buildy Blog&lt;/a&gt;.&lt;/p&gt;</summary><category term="programming"></category></entry><entry><title>Space Train Postmortem</title><link href="http://localhost:8000/space-train-postmortem.html" rel="alternate"></link><published>2010-12-13T00:00:00-08:00</published><author><name>Steve Landey</name></author><id>tag:localhost:8000,2010-12-13:space-train-postmortem.html</id><summary type="html">&lt;p&gt;&lt;img alt="Space Train logo" src="http://localhost:8000/img/content/space_train_logo.png" /&gt;&lt;/p&gt;
&lt;p&gt;With the end of a semester just past, my course projects are all bubbling up in
various states of completion. One of these is a point-and-click adventure game
called &lt;em&gt;&lt;a href="http://localhost:8000/space-train.html"&gt;Space Train: Terror on the Mustachio
Express&lt;/a&gt;&lt;/em&gt;, developed by a team of
students from the &lt;a href="http:/www.cia.edu/"&gt;Cleveland Institute of Art&lt;/a&gt; and &lt;a href="http:/www.case.edu"&gt;Case
Western Reserve University&lt;/a&gt;. Its technical components
include an event-driven level scripting system, characters, items, inventory,
dialogue, and more.  The engine is written in Python using my game programming
weapon of choice, the &lt;a href="http:/www.pyglet.org"&gt;pyglet&lt;/a&gt; library. The plot:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Inga Borga is a poetry-loving senior citizen. One of her favorite authors,
Stanislov Slavinsky, is reading his poetry live on the nearby Planet Deux, a
short hop by space train from Inga's home. She wants nothing more than to see
Stanislav in person, so she catches the Mustachio Express to Planet Deux.
Little does she know it will be a bumpy ride...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sounds grand, right? We thought so too, but in typical student fashion we
failed to account for one thing: &lt;strong&gt;adventure games take a lot of work to
make.&lt;/strong&gt; As a result, the game is only about twenty minutes long. Even so, we
all learned from the experience.&lt;/p&gt;


&lt;h2 id="the-course"&gt;The Course&lt;/h2&gt;
&lt;p&gt;"EECS 390 - Advanced Game Development Project" is a joint course between the
Cleveland Institute of Art and Case Western Reserve University. Teams of 6-12
artists and programmers collaborate to produce some sort of game. At the end of
the course, the teams present to their peers and to Electronic Arts staff for
questions and critique. The course is currently taught by Dr. Marc Buchner
(CWRU) and &lt;a href="http://www.knuthybinette.com/"&gt;Knut Hybinette&lt;/a&gt; (CIA).&lt;/p&gt;
&lt;p&gt;The other two games made this semester were Kalotai, a location-aware monster
collection/battle game for Android, and Louder Than Words, a platformer with
branching story lines based on a morality system.&lt;/p&gt;
&lt;h2 id="how-it-went-down"&gt;How It Went Down&lt;/h2&gt;
&lt;p&gt;We all arrived at 8:30 AM on the first day of class, heavily caffeinated.
Everyone put ideas on a white board and then divided into three teams based on
interest. My team ended up with four programmers and six artists, with me as
team leader. We immediately decided on some basics and began working on a
schedule. By 9:45, we had drawn a crazy whiteboard diagram.&lt;/p&gt;
&lt;p&gt;It was already clear that we would make the best game ever. The drawing was so
good we didn't even need a design document. We wrote one anyway because it was
a course requirement. We spent the next month and a half developing the
environments and the characters, fleshing out plot points, and writing the game
engine.&lt;/p&gt;
&lt;p&gt;The class was only scheduled to meet for an hour every week, which was far from
enough time to get anything done. Most of our communication was done on Fridays
in a classroom when we met to give status updates, brainstorm new directions,
and work on the schedule. During the week, we communicated via a mailing list,
shared files using a &lt;a href="http:/www.dropbox.com"&gt;Dropbox&lt;/a&gt; shared folder, and
pushed code back and forth with &lt;a href="http:/www.git-scm.org/"&gt;git&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At the halfway point, we presented our work to the class. Our demo revealed
some significant issues, none of which were technical: the character art lacked
a consistent style, the story was not cohesive, and there were no clear puzzle
designs. The characters we did have were shallow and stereotyped. This was not
a good situation to be in for a story-based and art-heavy game!&lt;/p&gt;
&lt;p&gt;We immediately changed our art and story development processes. Rather than
have three or four artists take characters all the way from concept to final
execution, we split all character work into line work, coloring, and shading,
and assigned one artist to each stage of the pipeline. Rather than working from
a vague, error-prone shared idea of a partially-recorded story, I spent a few
hours writing detailed scripts for each level we planned to implement. We
followed this process to the end, and it worked beautifully. We had a very
slick demo.&lt;/p&gt;
&lt;p&gt;Here are some screenshots of the game:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://localhost:8000/img/content/space_train_screenshot_1.png"&gt;&lt;img alt="Screenshot 1" src="http://localhost:8000/img/content/space_train_thumb_1.png" /&gt;&lt;/a&gt;
&lt;a href="http://localhost:8000/img/content/space_train_screenshot_2.png"&gt;&lt;img alt="Screenshot 2" src="http://localhost:8000/img/content/space_train_thumb_2.png" /&gt;&lt;/a&gt;
&lt;a href="http://localhost:8000/img/content/space_train_screenshot_3.png"&gt;&lt;img alt="Screenshot 3" src="http://localhost:8000/img/content/space_train_thumb_3.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are some of the stages of the game's artistic development:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://localhost:8000/img/content/space_train_art_1.png"&gt;&lt;img alt="Concept Art" src="http://localhost:8000/img/content/space_train_art_1_thumb.png" /&gt;&lt;/a&gt;
&lt;a href="http://localhost:8000/img/content/space_train_art_2.png"&gt;&lt;img alt="Line Art" src="http://localhost:8000/img/content/space_train_art_2_thumb.png" /&gt;&lt;/a&gt;
&lt;a href="http://localhost:8000/img/content/space_train_art_3.png"&gt;&lt;img alt="Flat Color" src="http://localhost:8000/img/content/space_train_art_3_thumb.png" /&gt;&lt;/a&gt;
&lt;a href="http://localhost:8000/img/content/space_train_art_4.png"&gt;&lt;img alt="Object/Furniture Design" src="http://localhost:8000/img/content/space_train_art_4_thumb.png" /&gt;&lt;/a&gt;
&lt;a href="http://localhost:8000/img/content/space_train_art_5.png"&gt;&lt;img alt="Rendered Art" src="http://localhost:8000/img/content/space_train_art_5_thumb.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="lessons-learned"&gt;Lessons Learned&lt;/h2&gt;
&lt;p&gt;I had never been in a months-long team leadership position before. My
experience organizing &lt;a href="http:/hacsoc.org/"&gt;CWRU Hacker Society&lt;/a&gt; helped, but
that was more cat herding than game building. By the end of the course the
team had worked out a process by trial and error that seemed to produce
results, but by the time we found that process, it was really too late to save
the game.&lt;/p&gt;
&lt;h3 id="schedule"&gt;Schedule&lt;/h3&gt;
&lt;p&gt;We spent too much time thinking up random characters and not enough time
fitting them into a big picture. We should have started writing
pseudo-screenplays or storyboards to work from by the third week. That would
have made it easier for us to give the artists specific tasks, a problem we had
early on.&lt;/p&gt;
&lt;p&gt;Storyboards would have given us the opportunity to implement parts of the
levels, which would have helped us develop a scripting API. For most of the
semester, we worked with an ad-hoc API. We ended up redesigning it in the last
week because it wasn't working for us anymore.&lt;/p&gt;
&lt;h3 id="adventure-games-are-hard-to-make"&gt;Adventure Games Are Hard to Make&lt;/h3&gt;
&lt;p&gt;Almost every game I have ever made has involved bullets. That usually means
those bullets are heading for a relatively small number of enemy types, are
flying over relatively simple pre-rendered or procedurally generated terrain,
and have very simple animations. In an adventure game, everything the player
sees has a unique design and multiple animations. The average screen time of a
given image is minutes or less. Even though we were working with six artists,
we were barely able to finish our 20 minutes of play time.&lt;/p&gt;
&lt;h3 id="communication-is-key"&gt;Communication is Key&lt;/h3&gt;
&lt;p&gt;We encouraged communication by providing as many useful collaboration tools as
possible. Without constant communication, Space Train would have been a total
failure.&lt;/p&gt;
&lt;p&gt;By keeping all live game assets in a shared Dropbox folder, we guaranteed
instant availability of the artists' work without using a cumbersome email
system or an artist-unfriendly version control system. Our consistent meeting
format was usually effective at giving everyone concrete goals for the week.
Git, of course, is the ideal code collaboration tool. The mailing list filled
in any gaps.&lt;/p&gt;
&lt;h3 id="course-project-group-dynamics-are-weird"&gt;Course Project Group Dynamics are Weird&lt;/h3&gt;
&lt;p&gt;I've always felt uncomfortable with the way course project groups are formed.
Usually they form around ideas, not around teams, and that was explicitly the
case with this course. This means that team dynamics are a total crapshoot, and
if things go south, you're locked in for three months and your success is
irrevocably chained together. By the end of the course, we effectively had two
programmers and four artists, with four other people functioning as dead
weight.&lt;/p&gt;
&lt;h3 id="conspicuously-absent-from-this-list"&gt;Conspicuously Absent From This List:&lt;/h3&gt;
&lt;p&gt;Significant code issues. We really powered through the engine and never got
hindered by any major design flaws. The game's source code is &lt;a href="http:/www.github.com/irskep/Space-Train"&gt;on
Github&lt;/a&gt;. It's not beautiful, but it
worked well enough for us.&lt;/p&gt;
&lt;h2 id="the-team"&gt;The Team&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Steve Johnson&lt;/strong&gt;: Lead programmer, screenplay, music, engine, UI&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http:/taxidermyrobot.blogspot.com/"&gt;Kelsey Bass&lt;/a&gt;&lt;/strong&gt;: Lead artist, character design/line work/animation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http:/www.fredhatfull.com/"&gt;Fred Hatfull&lt;/a&gt;&lt;/strong&gt;: Level scripting, engine, UI&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="http://www.ekeegan.com/"&gt;Liz Keegan&lt;/a&gt;&lt;/strong&gt;: Environments, objects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tyler Goeringer&lt;/strong&gt;: Level scripting, engine&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Susie Kim&lt;/strong&gt;: Objects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Drew Carrow&lt;/strong&gt;: Character design, environment/objects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sean Murphy&lt;/strong&gt;: Sound, pause screen&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dylan Carrow&lt;/strong&gt;: Coloring, objects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vincent Pizarski&lt;/strong&gt;: Character design, coloring, exteriors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kelsey did caricatures of the team for the credit sequence. Here's mine for:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Caricature" src="http://localhost:8000/img/content/space_train_caricature.png" /&gt;&lt;/p&gt;</summary><category term="games"></category></entry></feed>